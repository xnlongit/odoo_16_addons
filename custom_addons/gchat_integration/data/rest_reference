Google Chat API

bookmark_border

Release Notes
The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.

Service: chat.googleapis.com
To call this service, we recommend that you use the Google-provided client libraries. If your application needs to use your own libraries to call this service, use the following information when you make the API requests.

Discovery document
A Discovery Document is a machine-readable specification for describing and consuming REST APIs. It is used to build client libraries, IDE plugins, and other tools that interact with Google APIs. One service may provide multiple discovery documents. This service provides the following discovery document:

https://chat.googleapis.com/$discovery/rest?version=v1
Service endpoint
A service endpoint is a base URL that specifies the network address of an API service. One service might have multiple service endpoints. This service has the following service endpoint and all URIs below are relative to this service endpoint:

https://chat.googleapis.com
REST Resource: v1.customEmojis
Methods
create	POST /v1/customEmojis
Creates a custom emoji.
delete	DELETE /v1/{name=customEmojis/*}
Deletes a custom emoji.
get	GET /v1/{name=customEmojis/*}
Returns details about a custom emoji.
list	GET /v1/customEmojis
Lists custom emojis visible to the authenticated user.
REST Resource: v1.media
Methods
download	GET /v1/media/{resourceName=**}
Downloads media.
upload	POST /upload/v1/{parent=spaces/*}/attachments:upload
Uploads an attachment.
REST Resource: v1.spaces
Methods
completeImport	POST /v1/{name=spaces/*}:completeImport
Completes the import process for the specified space and makes it visible to users.
create	POST /v1/spaces
Creates a space.
delete	DELETE /v1/{name=spaces/*}
Deletes a named space.
findDirectMessage	GET /v1/spaces:findDirectMessage
Returns the existing direct message with the specified user.
get	GET /v1/{name=spaces/*}
Returns details about a space.
list	GET /v1/spaces
Lists spaces the caller is a member of.
patch	PATCH /v1/{space.name=spaces/*}
Updates a space.
search	GET /v1/spaces:search
Returns a list of spaces in a Google Workspace organization based on an administrator's search.
setup	POST /v1/spaces:setup
Creates a space and adds specified users to it.
REST Resource: v1.spaces.members
Methods
create	POST /v1/{parent=spaces/*}/members
Creates a membership for the calling Chat app, a user, or a Google Group.
delete	DELETE /v1/{name=spaces/*/members/*}
Deletes a membership.
get	GET /v1/{name=spaces/*/members/*}
Returns details about a membership.
list	GET /v1/{parent=spaces/*}/members
Lists memberships in a space.
patch	PATCH /v1/{membership.name=spaces/*/members/*}
Updates a membership.
REST Resource: v1.spaces.messages
Methods
create	POST /v1/{parent=spaces/*}/messages
Creates a message in a Google Chat space.
delete	DELETE /v1/{name=spaces/*/messages/*}
Deletes a message.
get	GET /v1/{name=spaces/*/messages/*}
Returns details about a message.
list	GET /v1/{parent=spaces/*}/messages
Lists messages in a space that the caller is a member of, including messages from blocked members and spaces.
patch	PATCH /v1/{message.name=spaces/*/messages/*}
Updates a message.
update	PUT /v1/{message.name=spaces/*/messages/*}
Updates a message.
REST Resource: v1.spaces.messages.attachments
Methods
get	GET /v1/{name=spaces/*/messages/*/attachments/*}
Gets the metadata of a message attachment.
REST Resource: v1.spaces.messages.reactions
Methods
create	POST /v1/{parent=spaces/*/messages/*}/reactions
Creates a reaction and adds it to a message.
delete	DELETE /v1/{name=spaces/*/messages/*/reactions/*}
Deletes a reaction to a message.
list	GET /v1/{parent=spaces/*/messages/*}/reactions
Lists reactions to a message.
REST Resource: v1.spaces.spaceEvents
Methods
get	GET /v1/{name=spaces/*/spaceEvents/*}
Returns an event from a Google Chat space.
list	GET /v1/{parent=spaces/*}/spaceEvents
Lists events from a Google Chat space.
REST Resource: v1.users.spaces
Methods
getSpaceReadState	GET /v1/{name=users/*/spaces/*/spaceReadState}
Returns details about a user's read state within a space, used to identify read and unread messages.
updateSpaceReadState	PATCH /v1/{spaceReadState.name=users/*/spaces/*/spaceReadState}
Updates a user's read state within a space, used to identify read and unread messages.
REST Resource: v1.users.spaces.spaceNotificationSetting
Methods
get	GET /v1/{name=users/*/spaces/*/spaceNotificationSetting}
Gets the space notification setting.
patch	PATCH /v1/{spaceNotificationSetting.name=users/*/spaces/*/spaceNotificationSetting}
Updates the space notification setting.
REST Resource: v1.users.spaces.threads
Methods
getThreadReadState	GET /v1/{name=users/*/spaces/*/threads/*/threadReadState}
Returns details about a user's read state within a thread, used to identify read and unread messages.
REST Resource: customEmojis

bookmark_border

Release Notes
Resource: CustomEmoji
Represents a custom emoji.

JSON representation

{
  "name": string,
  "uid": string,
  "emojiName": string,
  "temporaryImageUri": string,
  "payload": {
    object (CustomEmojiPayload)
  }
}
Fields
name	
string

Identifier. The resource name of the custom emoji, assigned by the server.

Format: customEmojis/{customEmoji}

uid	
string

Output only. Unique key for the custom emoji resource.

emojiName	
string

Optional. Immutable. User-provided name for the custom emoji, which is unique within the organization.

Required when the custom emoji is created, output only otherwise.

Emoji names must start and end with colons, must be lowercase and can only contain alphanumeric characters, hyphens, and underscores. Hyphens and underscores should be used to separate words and cannot be used consecutively.

Example: :valid-emoji-name:

temporaryImageUri	
string

Output only. A temporary image URL for the custom emoji, valid for at least 10 minutes. Note that this is not populated in the response when the custom emoji is created.

payload	
object (CustomEmojiPayload)

Optional. Input only. Payload data. Required when the custom emoji is created.

CustomEmojiPayload
Payload data for the custom emoji.

JSON representation

{
  "fileContent": string,
  "filename": string
}
Fields
fileContent	
string (bytes format)

Required. Input only. The image used for the custom emoji.

The payload must be under 256 KB and the dimension of the image must be square and between 64 and 500 pixels. The restrictions are subject to change.

filename	
string

Required. Input only. The image file name.

Supported file extensions: .png, .jpg, .gif.

Methods
create
Creates a custom emoji.
delete
Deletes a custom emoji.
get
Returns details about a custom emoji.
list
Lists custom emojis visible to the authenticated user.
Method: customEmojis.create

bookmark_border

Release Notes
Creates a custom emoji.

Custom emojis are only available for Google Workspace accounts, and the administrator must turn custom emojis on for the organization. For more information, see Learn about custom emojis in Google Chat and Manage custom emoji permissions.

Requires user authentication with the authorization scope:

https://www.googleapis.com/auth/chat.customemojis
HTTP request
POST https://chat.googleapis.com/v1/customEmojis

The URL uses gRPC Transcoding syntax.

Request body
The request body contains an instance of CustomEmoji.

Response body
If successful, the response body contains a newly created instance of CustomEmoji.

Authorization scopes
Requires the following OAuth scope:

https://www.googleapis.com/auth/chat.customemojis
Method: customEmojis.delete

bookmark_border

Release Notes
Deletes a custom emoji. By default, users can only delete custom emoji they created. Emoji managers assigned by the administrator can delete any custom emoji in the organization. See Learn about custom emojis in Google Chat.

Custom emojis are only available for Google Workspace accounts, and the administrator must turn custom emojis on for the organization. For more information, see Learn about custom emojis in Google Chat and Manage custom emoji permissions.

Requires user authentication with the authorization scope:

https://www.googleapis.com/auth/chat.customemojis
HTTP request
DELETE https://chat.googleapis.com/v1/{name=customEmojis/*}

The URL uses gRPC Transcoding syntax.

Path parameters
Parameters
name	
string

Required. Resource name of the custom emoji to delete.

Format: customEmojis/{customEmoji}

You can use the emoji name as an alias for {customEmoji}. For example, customEmojis/:example-emoji: where :example-emoji: is the emoji name for a custom emoji.

Request body
The request body must be empty.

Response body
If successful, the response body is an empty JSON object.

Authorization scopes
Requires the following OAuth scope:

https://www.googleapis.com/auth/chat.customemojis
For more information, see the Authorization guide.
Method: customEmojis.get

bookmark_border

Release Notes
Returns details about a custom emoji.

Custom emojis are only available for Google Workspace accounts, and the administrator must turn custom emojis on for the organization. For more information, see Learn about custom emojis in Google Chat and Manage custom emoji permissions.

Requires user authentication with one of the following authorization scopes:

https://www.googleapis.com/auth/chat.customemojis.readonly
https://www.googleapis.com/auth/chat.customemojis
HTTP request
GET https://chat.googleapis.com/v1/{name=customEmojis/*}

The URL uses gRPC Transcoding syntax.

Path parameters
Parameters
name	
string

Required. Resource name of the custom emoji.

Format: customEmojis/{customEmoji}

You can use the emoji name as an alias for {customEmoji}. For example, customEmojis/:example-emoji: where :example-emoji: is the emoji name for a custom emoji.

Request body
The request body must be empty.

Response body
If successful, the response body contains an instance of CustomEmoji.

Authorization scopes
Requires one of the following OAuth scopes:

https://www.googleapis.com/auth/chat.customemojis
https://www.googleapis.com/auth/chat.customemojis.readonly
For more information, see the Authorization guide.
Method: customEmojis.list

bookmark_border

Release Notes
Lists custom emojis visible to the authenticated user.

Custom emojis are only available for Google Workspace accounts, and the administrator must turn custom emojis on for the organization. For more information, see Learn about custom emojis in Google Chat and Manage custom emoji permissions.

Requires user authentication with one of the following authorization scopes:

https://www.googleapis.com/auth/chat.customemojis.readonly
https://www.googleapis.com/auth/chat.customemojis
HTTP request
GET https://chat.googleapis.com/v1/customEmojis

The URL uses gRPC Transcoding syntax.

Query parameters
Parameters
pageSize	
integer

Optional. The maximum number of custom emojis returned. The service can return fewer custom emojis than this value. If unspecified, the default value is 25. The maximum value is 200; values above 200 are changed to 200.

pageToken	
string

Optional. (If resuming from a previous query.)

A page token received from a previous list custom emoji call. Provide this to retrieve the subsequent page.

When paginating, the filter value should match the call that provided the page token. Passing a different value might lead to unexpected results.

filter	
string

Optional. A query filter.

Supports filtering by creator.

To filter by creator, you must specify a valid value. Currently only creator("users/me") and NOT creator("users/me") are accepted to filter custom emojis by whether they were created by the calling user or not.

For example, the following query returns custom emojis created by the caller:


creator("users/me")
Invalid queries are rejected with an INVALID_ARGUMENT error.

Request body
The request body must be empty.

Response body
A response to list custom emojis.

If successful, the response body contains data with the following structure:

JSON representation

{
  "customEmojis": [
    {
      object (CustomEmoji)
    }
  ],
  "nextPageToken": string
}
Fields
customEmojis[]	
object (CustomEmoji)

Unordered list. List of custom emojis.

nextPageToken	
string

A token that you can send as pageToken to retrieve the next page of results. If empty, there are no subsequent pages.

Authorization scopes
Requires one of the following OAuth scopes:

https://www.googleapis.com/auth/chat.customemojis
https://www.googleapis.com/auth/chat.customemojis.readonly
For more information, see the Authorization guide.
REST Resource: media

bookmark_border

Resource
A file in Google Chat. For example, a file attached to a message.

Methods
download
Downloads media.
upload
Uploads an attachment.
Method: media.download

bookmark_border

Downloads uploaded media, but not Google Drive files. Download is supported on the URI /v1/media/{+name}?alt=media. To export bytes from a Google Drive file, see the files.export method in Google Drive.

HTTP request
GET https://chat.googleapis.com/v1/media/{resourceName=**}

The URL uses gRPC Transcoding syntax.

Path parameters
Parameters
resourceName	
string

Name of the media that you are downloading. For more information, see spaces.messages.attachments.attachmentDataRef.

Request body
The request body must be empty.

Response body
If successful, this method returns the file content as bytes.

To download only part of a file, use the Range header with a byte range. For example: Range: bytes=500-999.

Authorization scopes
Requires one of the following OAuth scopes:

https://www.googleapis.com/auth/chat.bot
https://www.googleapis.com/auth/chat.messages
https://www.googleapis.com/auth/chat.messages.readonly
For more information, see the Authorization guide.
Method: media.upload

bookmark_border

Uploads an attachment. For an example, see Upload media as a file attachment.

Requires user authentication with one of the following authorization scopes:

https://www.googleapis.com/auth/chat.messages.create
https://www.googleapis.com/auth/chat.messages
https://www.googleapis.com/auth/chat.import (import mode spaces only)
You can upload attachments up to 200 MB. Certain file types aren't supported. For details, see File types blocked by Google Chat.

HTTP request
Upload URI, for media upload requests:
POST https://chat.googleapis.com/upload/v1/{parent=spaces/*}/attachments:upload
The URL uses gRPC Transcoding syntax.

Path parameters
Parameters
parent	
string

Required. Resource name of the Chat space in which the attachment is uploaded. Format "spaces/{space}".

Request body
The request body contains data with the following structure:

JSON representation

{
  "filename": string
}
Fields
filename	
string

Required. The filename of the attachment, including the file extension.

Response body
Response of uploading an attachment.

If successful, the response body contains data with the following structure:

JSON representation

{
  "attachmentDataRef": {
    object (AttachmentDataRef)
  }
}
Fields
attachmentDataRef	
object (AttachmentDataRef)

Reference to the uploaded attachment.

Authorization scopes
Requires one of the following OAuth scopes:

https://www.googleapis.com/auth/chat.import
https://www.googleapis.com/auth/chat.messages.create
https://www.googleapis.com/auth/chat.messages
For more information, see the Authorization guide.
REST Resource: spaces

bookmark_border

Release Notes
Resource: Space
A space in Google Chat. Spaces are conversations between two or more users or 1:1 messages between a user and a Chat app.

JSON representation

{
  "name": string,
  "type": enum (Type),
  "spaceType": enum (SpaceType),
  "singleUserBotDm": boolean,
  "threaded": boolean,
  "displayName": string,
  "externalUserAllowed": boolean,
  "spaceThreadingState": enum (SpaceThreadingState),
  "spaceDetails": {
    object (SpaceDetails)
  },
  "spaceHistoryState": enum (HistoryState),
  "importMode": boolean,
  "createTime": string,
  "lastActiveTime": string,
  "adminInstalled": boolean,
  "membershipCount": {
    object (MembershipCount)
  },
  "accessSettings": {
    object (AccessSettings)
  },
  "spaceUri": string,
  "importModeExpireTime": string,
  "customer": string,

  // Union field space_permission_settings can be only one of the following:
  "predefinedPermissionSettings": enum (PredefinedPermissionSettings),
  "permissionSettings": {
    object (PermissionSettings)
  }
  // End of list of possible types for union field space_permission_settings.
}
Fields
name	
string

Identifier. Resource name of the space.

Format: spaces/{space}

Where {space} represents the system-assigned ID for the space. You can obtain the space ID by calling the spaces.list() method or from the space URL. For example, if the space URL is https://mail.google.com/mail/u/0/#chat/space/AAAAAAAAA, the space ID is AAAAAAAAA.

type
(deprecated)	
enum (Type)

This item is deprecated!

Output only. Deprecated: Use spaceType instead. The type of a space.

spaceType	
enum (SpaceType)

Optional. The type of space. Required when creating a space or updating the space type of a space. Output only for other usage.

singleUserBotDm	
boolean

Optional. Whether the space is a DM between a Chat app and a single human.

threaded
(deprecated)	
boolean

This item is deprecated!

Output only. Deprecated: Use spaceThreadingState instead. Whether messages are threaded in this space.

displayName	
string

Optional. The space's display name. Required when creating a space with a spaceType of SPACE. If you receive the error message ALREADY_EXISTS when creating a space or updating the displayName, try a different displayName. An existing space within the Google Workspace organization might already use this display name.

For direct messages, this field might be empty.

Supports up to 128 characters.

externalUserAllowed	
boolean

Optional. Immutable. Whether this space permits any Google Chat user as a member. Input when creating a space in a Google Workspace organization. Omit this field when creating spaces in the following conditions:

The authenticated user uses a consumer account (unmanaged user account). By default, a space created by a consumer account permits any Google Chat user.
For existing spaces, this field is output only.

spaceThreadingState	
enum (SpaceThreadingState)

Output only. The threading state in the Chat space.

spaceDetails	
object (SpaceDetails)

Optional. Details about the space including description and rules.

spaceHistoryState	
enum (HistoryState)

Optional. The message history state for messages and threads in this space.

importMode	
boolean

Optional. Whether this space is created in Import Mode as part of a data migration into Google Workspace. While spaces are being imported, they aren't visible to users until the import is complete.

Creating a space in Import Moderequires user authentication.

createTime	
string (Timestamp format)

Optional. Immutable. For spaces created in Chat, the time the space was created. This field is output only, except when used in import mode spaces.

For import mode spaces, set this field to the historical timestamp at which the space was created in the source in order to preserve the original creation time.

Only populated in the output when spaceType is GROUP_CHAT or SPACE.

lastActiveTime	
string (Timestamp format)

Output only. Timestamp of the last message in the space.

adminInstalled	
boolean

Output only. For direct message (DM) spaces with a Chat app, whether the space was created by a Google Workspace administrator. Administrators can install and set up a direct message with a Chat app on behalf of users in their organization.

To support admin install, your Chat app must feature direct messaging.

membershipCount	
object (MembershipCount)

Output only. The count of joined memberships grouped by member type. Populated when the spaceType is SPACE, DIRECT_MESSAGE or GROUP_CHAT.

accessSettings	
object (AccessSettings)

Optional. Specifies the access setting of the space. Only populated when the spaceType is SPACE.

spaceUri	
string

Output only. The URI for a user to access the space.

importModeExpireTime	
string (Timestamp format)

Output only. The time when the space will be automatically deleted by the system if it remains in import mode.

Each space created in import mode must exit this mode before this expire time using spaces.completeImport.

This field is only populated for spaces that were created with import mode.

customer	
string

Optional. Immutable. The customer id of the domain of the space. Required only when creating a space with app authentication and SpaceType is SPACE, otherwise should not be set.

In the format customers/{customer}, where customer is the id from the Admin SDK customer resource. Private apps can also use the customers/my_customer alias to create the space in the same Google Workspace organization as the app.

For DMs, this field isn't populated.

Union field space_permission_settings. Represents the permission settings of a space. Only populated when the space_type is SPACE. space_permission_settings can be only one of the following:
predefinedPermissionSettings	
enum (PredefinedPermissionSettings)

Optional. Input only. Predefined space permission settings, input only when creating a space. If the field is not set, a collaboration space is created. After you create the space, settings are populated in the PermissionSettings field.

Setting predefined permission settings supports:

App authentication with administrator approval with the chat.app.spaces or chat.app.spaces.create scopes.

User authentication

permissionSettings	
object (PermissionSettings)

Optional. Space permission settings for existing spaces. Input for updating exact space permission settings, where existing permission settings are replaced. Output lists current permission settings.

Reading and updating permission settings supports:

App authentication with administrator approval with the chat.app.spaces scope. Only populated and settable when the Chat app created the space.

User authentication

Type
Deprecated: Use SpaceType instead.

Enums
TYPE_UNSPECIFIED	Reserved.
ROOM	Conversations between two or more humans.
DM	1:1 Direct Message between a human and a Chat app, where all messages are flat. Note that this doesn't include direct messages between two humans.
SpaceType
The type of space. Required when creating or updating a space. Output only for other usage.

Enums
SPACE_TYPE_UNSPECIFIED	Reserved.
SPACE	A place where people send messages, share files, and collaborate. A SPACE can include Chat apps.
GROUP_CHAT	Group conversations between 3 or more people. A GROUP_CHAT can include Chat apps.
DIRECT_MESSAGE	1:1 messages between two humans or a human and a Chat app.
SpaceThreadingState
Specifies the type of threading state in the Chat space.

Enums
SPACE_THREADING_STATE_UNSPECIFIED	Reserved.
THREADED_MESSAGES	Named spaces that support message threads. When users respond to a message, they can reply in-thread, which keeps their response in the context of the original message.
GROUPED_MESSAGES	Named spaces where the conversation is organized by topic. Topics and their replies are grouped together.
UNTHREADED_MESSAGES	Direct messages (DMs) between two people and group conversations between 3 or more people.
SpaceDetails
Details about the space including description and rules.

JSON representation

{
  "description": string,
  "guidelines": string
}
Fields
description	
string

Optional. A description of the space. For example, describe the space's discussion topic, functional purpose, or participants.

Supports up to 150 characters.

guidelines	
string

Optional. The space's rules, expectations, and etiquette.

Supports up to 5,000 characters.

HistoryState
The history state for messages and spaces. Specifies how long messages and conversation threads are kept after creation.

Enums
HISTORY_STATE_UNSPECIFIED	Default value. Do not use.
HISTORY_OFF	History off. Messages and threads are kept for 24 hours.
HISTORY_ON	History on. The organization's Vault retention rules specify for how long messages and threads are kept.
MembershipCount
Represents the count of memberships of a space, grouped into categories.

JSON representation

{
  "joinedDirectHumanUserCount": integer,
  "joinedGroupCount": integer
}
Fields
joinedDirectHumanUserCount	
integer

Output only. Count of human users that have directly joined the space, not counting users joined by having membership in a joined group.

joinedGroupCount	
integer

Output only. Count of all groups that have directly joined the space.

AccessSettings
Represents the access setting of the space.

JSON representation

{
  "accessState": enum (AccessState),
  "audience": string
}
Fields
accessState	
enum (AccessState)

Output only. Indicates the access state of the space.

audience	
string

Optional. The resource name of the target audience who can discover the space, join the space, and preview the messages in the space. If unset, only users or Google Groups who have been individually invited or added to the space can access it. For details, see Make a space discoverable to a target audience.

Format: audiences/{audience}

To use the default target audience for the Google Workspace organization, set to audiences/default.

Reading the target audience supports:

User authentication

App authentication with administrator approval with the chat.app.spaces scope.

This field is not populated when using the chat.bot scope with app authentication.

Setting the target audience requires user authentication.

AccessState
Represents the access state of the space.

Enums
ACCESS_STATE_UNSPECIFIED	Access state is unknown or not supported in this API.
PRIVATE	Only users or Google Groups that have been individually added or invited by other users or Google Workspace administrators can discover and access the space.
DISCOVERABLE	
A space manager has granted a target audience access to the space. Users or Google Groups that have been individually added or invited to the space can also discover and access the space. To learn more, see Make a space discoverable to specific users.

Creating discoverable spaces requires user authentication.

PredefinedPermissionSettings
Predefined permission settings that you can only specify when creating a named space. More settings might be added in the future. For details about permission settings for named spaces, see Learn about spaces.

Enums
PREDEFINED_PERMISSION_SETTINGS_UNSPECIFIED	Unspecified. Don't use.
COLLABORATION_SPACE	Setting to make the space a collaboration space where all members can post messages.
ANNOUNCEMENT_SPACE	Setting to make the space an announcement space where only space managers can post messages.
PermissionSettings
Permission settings that you can specify when updating an existing named space.

To set permission settings when creating a space, specify the PredefinedPermissionSettings field in your request.

JSON representation

{
  "manageMembersAndGroups": {
    object (PermissionSetting)
  },
  "modifySpaceDetails": {
    object (PermissionSetting)
  },
  "toggleHistory": {
    object (PermissionSetting)
  },
  "useAtMentionAll": {
    object (PermissionSetting)
  },
  "manageApps": {
    object (PermissionSetting)
  },
  "manageWebhooks": {
    object (PermissionSetting)
  },
  "postMessages": {
    object (PermissionSetting)
  },
  "replyMessages": {
    object (PermissionSetting)
  }
}
Fields
manageMembersAndGroups	
object (PermissionSetting)

Optional. Setting for managing members and groups in a space.

modifySpaceDetails	
object (PermissionSetting)

Optional. Setting for updating space name, avatar, description and guidelines.

toggleHistory	
object (PermissionSetting)

Optional. Setting for toggling space history on and off.

useAtMentionAll	
object (PermissionSetting)

Optional. Setting for using @all in a space.

manageApps	
object (PermissionSetting)

Optional. Setting for managing apps in a space.

manageWebhooks	
object (PermissionSetting)

Optional. Setting for managing webhooks in a space.

postMessages	
object (PermissionSetting)

Output only. Setting for posting messages in a space.

replyMessages	
object (PermissionSetting)

Optional. Setting for replying to messages in a space.

PermissionSetting
Represents a space permission setting.

JSON representation

{
  "managersAllowed": boolean,
  "membersAllowed": boolean
}
Fields
managersAllowed	
boolean

Optional. Whether spaces managers have this permission.

membersAllowed	
boolean

Optional. Whether non-manager members have this permission.

Methods
completeImport
Completes the import process for the specified space and makes it visible to users.
create
Creates a space.
delete
Deletes a named space.
findDirectMessage
Returns the existing direct message with the specified user.
get
Returns details about a space.
list
Lists spaces the caller is a member of.
patch
Updates a space.
search
Returns a list of spaces in a Google Workspace organization based on an administrator's search.
setup
Creates a space and adds specified users to it.
Method: spaces.completeImport

bookmark_border

Completes the import process for the specified space and makes it visible to users.

Requires user authentication and domain-wide delegation with the authorization scope:

https://www.googleapis.com/auth/chat.import
For more information, see Authorize Google Chat apps to import data.

HTTP request
POST https://chat.googleapis.com/v1/{name=spaces/*}:completeImport

The URL uses gRPC Transcoding syntax.

Path parameters
Parameters
name	
string

Required. Resource name of the import mode space.

Format: spaces/{space}

Request body
The request body must be empty.

Response body
Response message for completing the import process for a space.

If successful, the response body contains data with the following structure:

JSON representation

{
  "space": {
    object (Space)
  }
}
Fields
space	
object (Space)

The import mode space.

Authorization scopes
Requires the following OAuth scope:

https://www.googleapis.com/auth/chat.import
For more information, see the Authorization guide.
Method: spaces.create

bookmark_border

Release Notes
Creates a space. Can be used to create a named space, or a group chat in Import mode. For an example, see Create a space.

Supports the following types of authentication:

App authentication with administrator approval and one of the following authorization scopes:

https://www.googleapis.com/auth/chat.app.spaces.create
https://www.googleapis.com/auth/chat.app.spaces
User authentication with one of the following authorization scopes:

https://www.googleapis.com/auth/chat.spaces.create
https://www.googleapis.com/auth/chat.spaces
https://www.googleapis.com/auth/chat.import (import mode spaces only)
When authenticating as an app, the space.customer field must be set in the request.

When authenticating as an app, the Chat app is added as a member of the space. However, unlike human authentication, the Chat app is not added as a space manager. By default, the Chat app can be removed from the space by all space members. To allow only space managers to remove the app from a space, set space.permission_settings.manage_apps to managersAllowed.

Space membership upon creation depends on whether the space is created in Import mode:

Import mode: No members are created.
All other modes: The calling user is added as a member. This is:
The app itself when using app authentication.
The human user when using user authentication.
If you receive the error message ALREADY_EXISTS when creating a space, try a different displayName. An existing space within the Google Workspace organization might already use this display name.

HTTP request
POST https://chat.googleapis.com/v1/spaces

The URL uses gRPC Transcoding syntax.

Query parameters
Parameters
requestId	
string

Optional. A unique identifier for this request. A random UUID is recommended. Specifying an existing request ID returns the space created with that ID instead of creating a new space. Specifying an existing request ID from the same Chat app with a different authenticated user returns an error.

Request body
The request body contains an instance of Space.

Response body
If successful, the response body contains a newly created instance of Space.

Authorization scopes
Requires one of the following OAuth scopes:

https://www.googleapis.com/auth/chat.app.spaces.create
https://www.googleapis.com/auth/chat.app.spaces
https://www.googleapis.com/auth/chat.import
https://www.googleapis.com/auth/chat.spaces
https://www.googleapis.com/auth/chat.spaces.create
For more information, see the Authorization guide.
Method: spaces.delete

bookmark_border

Release Notes
Deletes a named space. Always performs a cascading delete, which means that the space's child resources—like messages posted in the space and memberships in the space—are also deleted. For an example, see Delete a space.

Supports the following types of authentication:

App authentication with administrator approval and the authorization scope:

https://www.googleapis.com/auth/chat.app.delete (only in spaces the app created)
User authentication with one of the following authorization scopes:

https://www.googleapis.com/auth/chat.delete
https://www.googleapis.com/auth/chat.import (import mode spaces only)
User authentication grants administrator privileges when an administrator account authenticates, useAdminAccess is true, and the following authorization scope is used:
https://www.googleapis.com/auth/chat.admin.delete
HTTP request
DELETE https://chat.googleapis.com/v1/{name=spaces/*}

The URL uses gRPC Transcoding syntax.

Path parameters
Parameters
name	
string

Required. Resource name of the space to delete.

Format: spaces/{space}

Query parameters
Parameters
useAdminAccess	
boolean

Optional. When true, the method runs using the user's Google Workspace administrator privileges.

The calling user must be a Google Workspace administrator with the manage chat and spaces conversations privilege.

Requires the chat.admin.delete OAuth 2.0 scope.

Request body
The request body must be empty.

Response body
If successful, the response body is an empty JSON object.

Authorization scopes
Requires one of the following OAuth scopes:

https://www.googleapis.com/auth/chat.app.delete
https://www.googleapis.com/auth/chat.admin.delete
https://www.googleapis.com/auth/chat.import
https://www.googleapis.com/auth/chat.delete
For more information, see the Authorization guide.
Method: spaces.findDirectMessage

bookmark_border

Returns the existing direct message with the specified user. If no direct message space is found, returns a 404 NOT_FOUND error. For an example, see Find a direct message.

With app authentication, returns the direct message space between the specified user and the calling Chat app.

With user authentication, returns the direct message space between the specified user and the authenticated user.

Supports the following types of authentication:

App authentication with the authorization scope:

https://www.googleapis.com/auth/chat.bot
User authentication with one of the following authorization scopes:

https://www.googleapis.com/auth/chat.spaces.readonly
https://www.googleapis.com/auth/chat.spaces
HTTP request
GET https://chat.googleapis.com/v1/spaces:findDirectMessage

The URL uses gRPC Transcoding syntax.

Query parameters
Parameters
name	
string

Required. Resource name of the user to find direct message with.

Format: users/{user}, where {user} is either the id for the person from the People API, or the id for the user in the Directory API. For example, if the People API profile ID is 123456789, you can find a direct message with that person by using users/123456789 as the name. When authenticated as a user, you can use the email as an alias for {user}. For example, users/example@gmail.com where example@gmail.com is the email of the Google Chat user.

Request body
The request body must be empty.

Response body
If successful, the response body contains an instance of Space.

Authorization scopes
Requires one of the following OAuth scopes:

https://www.googleapis.com/auth/chat.spaces
https://www.googleapis.com/auth/chat.spaces.readonly
https://www.googleapis.com/auth/chat.bot
For more information, see the Authorization guide.


Method: spaces.get

bookmark_border

Release Notes
Returns details about a space. For an example, see Get details about a space.

Supports the following types of authentication:

App authentication with one of the following authorization scopes:

https://www.googleapis.com/auth/chat.bot
https://www.googleapis.com/auth/chat.app.spaces with administrator approval
User authentication with one of the following authorization scopes:

https://www.googleapis.com/auth/chat.spaces.readonly
https://www.googleapis.com/auth/chat.spaces
User authentication grants administrator privileges when an administrator account authenticates, useAdminAccess is true, and one of the following authorization scopes is used:
https://www.googleapis.com/auth/chat.admin.spaces.readonly
https://www.googleapis.com/auth/chat.admin.spaces
App authentication has the following limitations:

space.access_settings is only populated when using the chat.app.spaces scope.
space.predefind_permission_settings and space.permission_settings are only populated when using the chat.app.spaces scope, and only for spaces the app created.
HTTP request
GET https://chat.googleapis.com/v1/{name=spaces/*}

The URL uses gRPC Transcoding syntax.

Path parameters
Parameters
name	
string

Required. Resource name of the space, in the form spaces/{space}.

Format: spaces/{space}

Query parameters
Parameters
useAdminAccess	
boolean

Optional. When true, the method runs using the user's Google Workspace administrator privileges.

The calling user must be a Google Workspace administrator with the manage chat and spaces conversations privilege.

Requires the chat.admin.spaces or chat.admin.spaces.readonly OAuth 2.0 scopes.

Request body
The request body must be empty.

Response body
If successful, the response body contains an instance of Space.

Authorization scopes
Requires one of the following OAuth scopes:

https://www.googleapis.com/auth/chat.admin.spaces
https://www.googleapis.com/auth/chat.admin.spaces.readonly
https://www.googleapis.com/auth/chat.spaces
https://www.googleapis.com/auth/chat.spaces.readonly
https://www.googleapis.com/auth/chat.bot
https://www.googleapis.com/auth/chat.app.spaces
For more information, see the Authorization guide.
Method: spaces.list

bookmark_border

Lists spaces the caller is a member of. Group chats and DMs aren't listed until the first message is sent. For an example, see List spaces.

Supports the following types of authentication:

App authentication with the authorization scope:

https://www.googleapis.com/auth/chat.bot
User authentication with one of the following authorization scopes:

https://www.googleapis.com/auth/chat.spaces.readonly
https://www.googleapis.com/auth/chat.spaces
To list all named spaces by Google Workspace organization, use the spaces.search() method using Workspace administrator privileges instead.

HTTP request
GET https://chat.googleapis.com/v1/spaces

The URL uses gRPC Transcoding syntax.

Query parameters
Parameters
pageSize	
integer

Optional. The maximum number of spaces to return. The service might return fewer than this value.

If unspecified, at most 100 spaces are returned.

The maximum value is 1000. If you use a value more than 1000, it's automatically changed to 1000.

Negative values return an INVALID_ARGUMENT error.

pageToken	
string

Optional. A page token, received from a previous list spaces call. Provide this parameter to retrieve the subsequent page.

When paginating, the filter value should match the call that provided the page token. Passing a different value may lead to unexpected results.

filter	
string

Optional. A query filter.

You can filter spaces by the space type (spaceType).

To filter by space type, you must specify valid enum value, such as SPACE or GROUP_CHAT (the spaceType can't be SPACE_TYPE_UNSPECIFIED). To query for multiple space types, use the OR operator.

For example, the following queries are valid:


spaceType = "SPACE"
spaceType = "GROUP_CHAT" OR spaceType = "DIRECT_MESSAGE"
Invalid queries are rejected by the server with an INVALID_ARGUMENT error.

Request body
The request body must be empty.

Response body
The response for a list spaces request.

If successful, the response body contains data with the following structure:

JSON representation

{
  "spaces": [
    {
      object (Space)
    }
  ],
  "nextPageToken": string
}
Fields
spaces[]	
object (Space)

List of spaces in the requested (or first) page. Note: The permissionSettings field is not returned in the Space object for list requests.

nextPageToken	
string

You can send a token as pageToken to retrieve the next page of results. If empty, there are no subsequent pages.

Authorization scopes
Requires one of the following OAuth scopes:

https://www.googleapis.com/auth/chat.spaces
https://www.googleapis.com/auth/chat.spaces.readonly
https://www.googleapis.com/auth/chat.bot
For more information, see the Authorization guide.
Method: spaces.patch

bookmark_border

Release Notes
Updates a space. For an example, see Update a space.

If you're updating the displayName field and receive the error message ALREADY_EXISTS, try a different display name.. An existing space within the Google Workspace organization might already use this display name.

Supports the following types of authentication:

App authentication with administrator approval and one of the following authorization scopes:

https://www.googleapis.com/auth/chat.app.spaces
User authentication with one of the following authorization scopes:

https://www.googleapis.com/auth/chat.spaces
https://www.googleapis.com/auth/chat.import (import mode spaces only)
User authentication grants administrator privileges when an administrator account authenticates, useAdminAccess is true, and the following authorization scopes is used:
https://www.googleapis.com/auth/chat.admin.spaces
App authentication has the following limitations:

To update either space.predefined_permission_settings or space.permission_settings, the app must be the space creator.
Updating the space.access_settings.audience is not supported for app authentication.
HTTP request
PATCH https://chat.googleapis.com/v1/{space.name=spaces/*}

The URL uses gRPC Transcoding syntax.

Path parameters
Parameters
space.name	
string

Identifier. Resource name of the space.

Format: spaces/{space}

Where {space} represents the system-assigned ID for the space. You can obtain the space ID by calling the spaces.list() method or from the space URL. For example, if the space URL is https://mail.google.com/mail/u/0/#chat/space/AAAAAAAAA, the space ID is AAAAAAAAA.

Query parameters
Parameters
updateMask	
string (FieldMask format)

Required. The updated field paths, comma separated if there are multiple.

You can update the following fields for a space:

spaceDetails: Updates the space's description. Supports up to 150 characters.

displayName: Only supports updating the display name for spaces where spaceType field is SPACE. If you receive the error message ALREADY_EXISTS, try a different value. An existing space within the Google Workspace organization might already use this display name.

spaceType: Only supports changing a GROUP_CHAT space type to SPACE. Include displayName together with spaceType in the update mask and ensure that the specified space has a non-empty display name and the SPACE space type. Including the spaceType mask and the SPACE type in the specified space when updating the display name is optional if the existing space already has the SPACE type. Trying to update the space type in other ways results in an invalid argument error. spaceType is not supported with useAdminAccess.

spaceHistoryState: Updates space history settings by turning history on or off for the space. Only supported if history settings are enabled for the Google Workspace organization. To update the space history state, you must omit all other field masks in your request. spaceHistoryState is not supported with useAdminAccess.

accessSettings.audience: Updates the access setting of who can discover the space, join the space, and preview the messages in named space where spaceType field is SPACE. If the existing space has a target audience, you can remove the audience and restrict space access by omitting a value for this field mask. To update access settings for a space, the authenticating user must be a space manager and omit all other field masks in your request. You can't update this field if the space is in import mode. To learn more, see Make a space discoverable to specific users. accessSettings.audience is not supported with useAdminAccess.

permissionSettings: Supports changing the permission settings of a space. When updating permission settings, you can only specify permissionSettings field masks; you cannot update other field masks at the same time. permissionSettings is not supported with useAdminAccess. The supported field masks include:

permissionSettings.manageMembersAndGroups
permissionSettings.modifySpaceDetails
permissionSettings.toggleHistory
permissionSettings.useAtMentionAll
permissionSettings.manageApps
permissionSettings.manageWebhooks
permissionSettings.replyMessages
useAdminAccess	
boolean

Optional. When true, the method runs using the user's Google Workspace administrator privileges.

The calling user must be a Google Workspace administrator with the manage chat and spaces conversations privilege.

Requires the chat.admin.spaces OAuth 2.0 scope.

Some FieldMask values are not supported using admin access. For details, see the description of updateMask.

Request body
The request body contains an instance of Space.

Response body
If successful, the response body contains an instance of Space.

Authorization scopes
Requires one of the following OAuth scopes:

https://www.googleapis.com/auth/chat.app.spaces
https://www.googleapis.com/auth/chat.admin.spaces
https://www.googleapis.com/auth/chat.import
https://www.googleapis.com/auth/chat.spaces
For more information, see the Authorization guide.
Method: spaces.search

bookmark_border

Release Notes
Returns a list of spaces in a Google Workspace organization based on an administrator's search.

Requires user authentication with administrator privileges and one of the following authorization scopes:

https://www.googleapis.com/auth/chat.admin.spaces.readonly
https://www.googleapis.com/auth/chat.admin.spaces
In the request, set useAdminAccess to true.

HTTP request
GET https://chat.googleapis.com/v1/spaces:search

The URL uses gRPC Transcoding syntax.

Query parameters
Parameters
useAdminAccess	
boolean

When true, the method runs using the user's Google Workspace administrator privileges.

The calling user must be a Google Workspace administrator with the manage chat and spaces conversations privilege.

Requires either the chat.admin.spaces.readonly or chat.admin.spaces OAuth 2.0 scope.

This method currently only supports admin access, thus only true is accepted for this field.

pageSize	
integer

The maximum number of spaces to return. The service may return fewer than this value.

If unspecified, at most 100 spaces are returned.

The maximum value is 1000. If you use a value more than 1000, it's automatically changed to 1000.

pageToken	
string

A token, received from the previous search spaces call. Provide this parameter to retrieve the subsequent page.

When paginating, all other parameters provided should match the call that provided the page token. Passing different values to the other parameters might lead to unexpected results.

query	
string

Required. A search query.

You can search by using the following parameters:

createTime
customer
displayName
externalUserAllowed
lastActiveTime
spaceHistoryState
spaceType
createTime and lastActiveTime accept a timestamp in RFC-3339 format and the supported comparison operators are: =, <, >, <=, >=.

customer is required and is used to indicate which customer to fetch spaces from. customers/my_customer is the only supported value.

displayName only accepts the HAS (:) operator. The text to match is first tokenized into tokens and each token is prefix-matched case-insensitively and independently as a substring anywhere in the space's displayName. For example, Fun Eve matches Fun event or The evening was fun, but not notFun event or even.

externalUserAllowed accepts either true or false.

spaceHistoryState only accepts values from the historyState field of a space resource.

spaceType is required and the only valid value is SPACE.

Across different fields, only AND operators are supported. A valid example is spaceType = "SPACE" AND displayName:"Hello" and an invalid example is spaceType = "SPACE" OR displayName:"Hello".

Among the same field, spaceType doesn't support AND or OR operators. displayName, 'spaceHistoryState', and 'externalUserAllowed' only support OR operators. lastActiveTime and createTime support both AND and OR operators. AND can only be used to represent an interval, such as lastActiveTime < "2022-01-01T00:00:00+00:00" AND lastActiveTime > "2023-01-01T00:00:00+00:00".

The following example queries are valid:


customer = "customers/my_customer" AND spaceType = "SPACE"

customer = "customers/my_customer" AND spaceType = "SPACE" AND
displayName:"Hello World"

customer = "customers/my_customer" AND spaceType = "SPACE" AND
(lastActiveTime < "2020-01-01T00:00:00+00:00" OR lastActiveTime >
"2022-01-01T00:00:00+00:00")

customer = "customers/my_customer" AND spaceType = "SPACE" AND
(displayName:"Hello World" OR displayName:"Fun event") AND
(lastActiveTime > "2020-01-01T00:00:00+00:00" AND lastActiveTime <
"2022-01-01T00:00:00+00:00")

customer = "customers/my_customer" AND spaceType = "SPACE" AND
(createTime > "2019-01-01T00:00:00+00:00" AND createTime <
"2020-01-01T00:00:00+00:00") AND (externalUserAllowed = "true") AND
(spaceHistoryState = "HISTORY_ON" OR spaceHistoryState = "HISTORY_OFF")
orderBy	
string

Optional. How the list of spaces is ordered.

Supported attributes to order by are:

membershipCount.joined_direct_human_user_count — Denotes the count of human users that have directly joined a space.
lastActiveTime — Denotes the time when last eligible item is added to any topic of this space.
createTime — Denotes the time of the space creation.
Valid ordering operation values are:

ASC for ascending. Default value.

DESC for descending.

The supported syntax are:

membershipCount.joined_direct_human_user_count DESC
membershipCount.joined_direct_human_user_count ASC
lastActiveTime DESC
lastActiveTime ASC
createTime DESC
createTime ASC
Request body
The request body must be empty.

Response body
Response with a list of spaces corresponding to the search spaces request.

If successful, the response body contains data with the following structure:

JSON representation

{
  "spaces": [
    {
      object (Space)
    }
  ],
  "nextPageToken": string,
  "totalSize": integer
}
Fields
spaces[]	
object (Space)

A page of the requested spaces.

nextPageToken	
string

A token that can be used to retrieve the next page. If this field is empty, there are no subsequent pages.

totalSize	
integer

The total number of spaces that match the query, across all pages. If the result is over 10,000 spaces, this value is an estimate.

Authorization scopes
Requires one of the following OAuth scopes:

https://www.googleapis.com/auth/chat.admin.spaces
https://www.googleapis.com/auth/chat.admin.spaces.readonly
For more information, see the Authorization guide.
Method: spaces.setup

bookmark_border

Release Notes
Creates a space and adds specified users to it. The calling user is automatically added to the space, and shouldn't be specified as a membership in the request. For an example, see Set up a space with initial members.

To specify the human members to add, add memberships with the appropriate membership.member.name. To add a human user, use users/{user}, where {user} can be the email address for the user. For users in the same Workspace organization {user} can also be the id for the person from the People API, or the id for the user in the Directory API. For example, if the People API Person profile ID for user@example.com is 123456789, you can add the user to the space by setting the membership.member.name to users/user@example.com or users/123456789.

To specify the Google groups to add, add memberships with the appropriate membership.group_member.name. To add or invite a Google group, use groups/{group}, where {group} is the id for the group from the Cloud Identity Groups API. For example, you can use Cloud Identity Groups lookup API to retrieve the ID 123456789 for group email group@example.com, then you can add the group to the space by setting the membership.group_member.name to groups/123456789. Group email is not supported, and Google groups can only be added as members in named spaces.

For a named space or group chat, if the caller blocks, or is blocked by some members, or doesn't have permission to add some members, then those members aren't added to the created space.

To create a direct message (DM) between the calling user and another human user, specify exactly one membership to represent the human user. If one user blocks the other, the request fails and the DM isn't created.

To create a DM between the calling user and the calling app, set Space.singleUserBotDm to true and don't specify any memberships. You can only use this method to set up a DM with the calling app. To add the calling app as a member of a space or an existing DM between two human users, see Invite or add a user or app to a space.

If a DM already exists between two users, even when one user blocks the other at the time a request is made, then the existing DM is returned.

Spaces with threaded replies aren't supported. If you receive the error message ALREADY_EXISTS when setting up a space, try a different displayName. An existing space within the Google Workspace organization might already use this display name.

Requires user authentication with one of the following authorization scopes:

https://www.googleapis.com/auth/chat.spaces.create
https://www.googleapis.com/auth/chat.spaces
HTTP request
POST https://chat.googleapis.com/v1/spaces:setup

The URL uses gRPC Transcoding syntax.

Request body
The request body contains data with the following structure:

JSON representation

{
  "space": {
    object (Space)
  },
  "requestId": string,
  "memberships": [
    {
      object (Membership)
    }
  ]
}
Fields
space	
object (Space)

Required. The Space.spaceType field is required.

To create a space, set Space.spaceType to SPACE and set Space.displayName. If you receive the error message ALREADY_EXISTS when setting up a space, try a different displayName. An existing space within the Google Workspace organization might already use this display name.

To create a group chat, set Space.spaceType to GROUP_CHAT. Don't set Space.displayName.

To create a 1:1 conversation between humans, set Space.spaceType to DIRECT_MESSAGE and set Space.singleUserBotDm to false. Don't set Space.displayName or Space.spaceDetails.

To create an 1:1 conversation between a human and the calling Chat app, set Space.spaceType to DIRECT_MESSAGE and Space.singleUserBotDm to true. Don't set Space.displayName or Space.spaceDetails.

If a DIRECT_MESSAGE space already exists, that space is returned instead of creating a new space.

requestId	
string

Optional. A unique identifier for this request. A random UUID is recommended. Specifying an existing request ID returns the space created with that ID instead of creating a new space. Specifying an existing request ID from the same Chat app with a different authenticated user returns an error.

memberships[]	
object (Membership)

Optional. The Google Chat users or groups to invite to join the space. Omit the calling user, as they are added automatically.

The set currently allows up to 49 memberships (in addition to the caller).

For human membership, the Membership.member field must contain a user with name populated (format: users/{user}) and type set to User.Type.HUMAN. You can only add human users when setting up a space (adding Chat apps is only supported for direct message setup with the calling app). You can also add members using the user's email as an alias for {user}. For example, the user.name can be users/example@gmail.com. To invite Gmail users or users from external Google Workspace domains, user's email must be used for {user}.

For Google group membership, the Membership.group_member field must contain a group with name populated (format groups/{group}). You can only add Google groups when setting Space.spaceType to SPACE.

Optional when setting Space.spaceType to SPACE.

Required when setting Space.spaceType to GROUP_CHAT, along with at least two memberships.

Required when setting Space.spaceType to DIRECT_MESSAGE with a human user, along with exactly one membership.

Must be empty when creating a 1:1 conversation between a human and the calling Chat app (when setting Space.spaceType to DIRECT_MESSAGE and Space.singleUserBotDm to true).

Response body
If successful, the response body contains an instance of Space.

Authorization scopes
Requires one of the following OAuth scopes:

https://www.googleapis.com/auth/chat.spaces
https://www.googleapis.com/auth/chat.spaces.create
For more information, see the Authorization guide.
REST Resource: spaces.members

bookmark_border

Resource: Membership
Represents a membership relation in Google Chat, such as whether a user or Chat app is invited to, part of, or absent from a space.

JSON representation

{
  "name": string,
  "state": enum (MembershipState),
  "role": enum (MembershipRole),
  "createTime": string,
  "deleteTime": string,

  // Union field memberType can be only one of the following:
  "member": {
    object (User)
  },
  "groupMember": {
    object (Group)
  }
  // End of list of possible types for union field memberType.
}
Fields
name	
string

Identifier. Resource name of the membership, assigned by the server.

Format: spaces/{space}/members/{member}

state	
enum (MembershipState)

Output only. State of the membership.

role	
enum (MembershipRole)

Optional. User's role within a Chat space, which determines their permitted actions in the space.

This field can only be used as input in members.patch.

createTime	
string (Timestamp format)

Optional. Immutable. The creation time of the membership, such as when a member joined or was invited to join a space. This field is output only, except when used to import historical memberships in import mode spaces.

deleteTime	
string (Timestamp format)

Optional. Immutable. The deletion time of the membership, such as when a member left or was removed from a space. This field is output only, except when used to import historical memberships in import mode spaces.

Union field memberType. Member associated with this membership. Other member types might be supported in the future. memberType can be only one of the following:
member	
object (User)

Optional. The Google Chat user or app the membership corresponds to. If your Chat app authenticates as a user, the output populates the user name and type.

groupMember	
object (Group)

Optional. The Google Group the membership corresponds to.

Reading or mutating memberships for Google Groups requires user authentication.

MembershipState
Specifies the member's relationship with a space. Other membership states might be supported in the future.

Enums
MEMBERSHIP_STATE_UNSPECIFIED	Default value. Don't use.
JOINED	The user is added to the space, and can participate in the space.
INVITED	The user is invited to join the space, but hasn't joined it.
NOT_A_MEMBER	The user doesn't belong to the space and doesn't have a pending invitation to join the space.
MembershipRole
Represents a user's permitted actions in a Chat space. More enum values might be added in the future.

Enums
MEMBERSHIP_ROLE_UNSPECIFIED	Default value. For users: they aren't a member of the space, but can be invited. For Google Groups: they're always assigned this role (other enum values might be used in the future).
ROLE_MEMBER	A member of the space. The user has basic permissions, like sending messages to the space. In 1:1 and unnamed group conversations, everyone has this role.
ROLE_MANAGER	A space manager. The user has all basic permissions plus administrative permissions that let them manage the space, like adding or removing members. Only supported in SpaceType.SPACE.
Group
A Google Group in Google Chat.

JSON representation

{
  "name": string
}
Fields
name	
string

Resource name for a Google Group.

Represents a group in Cloud Identity Groups API.

Format: groups/{group}

Methods
create
Creates a membership for the calling Chat app, a user, or a Google Group.
delete
Deletes a membership.
get
Returns details about a membership.
list
Lists memberships in a space.
patch
Updates a membership.
Method: spaces.members.create

bookmark_border

Release Notes
Creates a membership for the calling Chat app, a user, or a Google Group. Creating memberships for other Chat apps isn't supported. When creating a membership, if the specified member has their auto-accept policy turned off, then they're invited, and must accept the space invitation before joining. Otherwise, creating a membership adds the member directly to the specified space.

Supports the following types of authentication:

App authentication with administrator approval and the authorization scope:

https://www.googleapis.com/auth/chat.app.memberships
User authentication with one of the following authorization scopes:

https://www.googleapis.com/auth/chat.memberships
https://www.googleapis.com/auth/chat.memberships.app (to add the calling app to the space)
https://www.googleapis.com/auth/chat.import (import mode spaces only)
User authentication grants administrator privileges when an administrator account authenticates, useAdminAccess is true, and the following authorization scope is used:
https://www.googleapis.com/auth/chat.admin.memberships
App authentication is not supported for the following use cases:

Inviting users external to the Workspace organization that owns the space.
Adding a Google Group to a space.
Adding a Chat app to a space.
For example usage, see:

Invite or add a user to a space.
Invite or add a Google Group to a space.
Add the Chat app to a space.
HTTP request
POST https://chat.googleapis.com/v1/{parent=spaces/*}/members

The URL uses gRPC Transcoding syntax.

Path parameters
Parameters
parent	
string

Required. The resource name of the space for which to create the membership.

Format: spaces/{space}

Query parameters
Parameters
useAdminAccess	
boolean

Optional. When true, the method runs using the user's Google Workspace administrator privileges.

The calling user must be a Google Workspace administrator with the manage chat and spaces conversations privilege.

Requires the chat.admin.memberships OAuth 2.0 scope.

Creating app memberships or creating memberships for users outside the administrator's Google Workspace organization isn't supported using admin access.

Request body
The request body contains an instance of Membership.

Response body
If successful, the response body contains a newly created instance of Membership.

Authorization scopes
Requires one of the following OAuth scopes:

https://www.googleapis.com/auth/chat.app.memberships
https://www.googleapis.com/auth/chat.admin.memberships
https://www.googleapis.com/auth/chat.import
https://www.googleapis.com/auth/chat.memberships
https://www.googleapis.com/auth/chat.memberships.app
For more information, see the Authorization guide.
Method: spaces.members.delete

bookmark_border

Release Notes
Deletes a membership. For an example, see Remove a user or a Google Chat app from a space.

Supports the following types of authentication:

App authentication with administrator approval and the authorization scope:

https://www.googleapis.com/auth/chat.app.memberships
User authentication with one of the following authorization scopes:

https://www.googleapis.com/auth/chat.memberships
https://www.googleapis.com/auth/chat.memberships.app (to remove the calling app from the space)
https://www.googleapis.com/auth/chat.import (import mode spaces only)
User authentication grants administrator privileges when an administrator account authenticates, useAdminAccess is true, and the following authorization scope is used:
https://www.googleapis.com/auth/chat.admin.memberships
App authentication is not supported for the following use cases:

Removing a Google Group from a space.
Removing a Chat app from a space.
To delete memberships for space managers, the requester must be a space manager. If you're using app authentication the Chat app must be the space creator.

HTTP request
DELETE https://chat.googleapis.com/v1/{name=spaces/*/members/*}

The URL uses gRPC Transcoding syntax.

Path parameters
Parameters
name	
string

Required. Resource name of the membership to delete. Chat apps can delete human users' or their own memberships. Chat apps can't delete other apps' memberships.

When deleting a human membership, requires the chat.memberships scope with user authentication or the chat.memberships.app scope with app authentication and the spaces/{space}/members/{member} format. You can use the email as an alias for {member}. For example, spaces/{space}/members/example@gmail.com where example@gmail.com is the email of the Google Chat user.

When deleting an app membership, requires the chat.memberships.app scope and spaces/{space}/members/app format.

Format: spaces/{space}/members/{member} or spaces/{space}/members/app.

Query parameters
Parameters
useAdminAccess	
boolean

Optional. When true, the method runs using the user's Google Workspace administrator privileges.

The calling user must be a Google Workspace administrator with the manage chat and spaces conversations privilege.

Requires the chat.admin.memberships OAuth 2.0 scope.

Deleting app memberships in a space isn't supported using admin access.

Request body
The request body must be empty.

Response body
If successful, the response body contains an instance of Membership.

Authorization scopes
Requires one of the following OAuth scopes:

https://www.googleapis.com/auth/chat.app.memberships
https://www.googleapis.com/auth/chat.admin.memberships
https://www.googleapis.com/auth/chat.import
https://www.googleapis.com/auth/chat.memberships
https://www.googleapis.com/auth/chat.memberships.app
For more information, see the Authorization guide.
Method: spaces.members.get

bookmark_border

Release Notes
Returns details about a membership. For an example, see Get details about a user's or Google Chat app's membership.

Supports the following types of authentication:

App authentication with one of the following authorization scopes:

https://www.googleapis.com/auth/chat.bot
https://www.googleapis.com/auth/chat.app.memberships (requires administrator approval)
User authentication with one of the following authorization scopes:

https://www.googleapis.com/auth/chat.memberships.readonly
https://www.googleapis.com/auth/chat.memberships
User authentication grants administrator privileges when an administrator account authenticates, useAdminAccess is true, and one of the following authorization scopes is used:
https://www.googleapis.com/auth/chat.admin.memberships.readonly
https://www.googleapis.com/auth/chat.admin.memberships
HTTP request
GET https://chat.googleapis.com/v1/{name=spaces/*/members/*}

The URL uses gRPC Transcoding syntax.

Path parameters
Parameters
name	
string

Required. Resource name of the membership to retrieve.

To get the app's own membership by using user authentication, you can optionally use spaces/{space}/members/app.

Format: spaces/{space}/members/{member} or spaces/{space}/members/app

You can use the user's email as an alias for {member}. For example, spaces/{space}/members/example@gmail.com where example@gmail.com is the email of the Google Chat user.

Query parameters
Parameters
useAdminAccess	
boolean

Optional. When true, the method runs using the user's Google Workspace administrator privileges.

The calling user must be a Google Workspace administrator with the manage chat and spaces conversations privilege.

Requires the chat.admin.memberships or chat.admin.memberships.readonly OAuth 2.0 scopes.

Getting app memberships in a space isn't supported when using admin access.

Request body
The request body must be empty.

Response body
If successful, the response body contains an instance of Membership.

Authorization scopes
Requires one of the following OAuth scopes:

https://www.googleapis.com/auth/chat.admin.memberships
https://www.googleapis.com/auth/chat.admin.memberships.readonly
https://www.googleapis.com/auth/chat.app.memberships
https://www.googleapis.com/auth/chat.bot
https://www.googleapis.com/auth/chat.memberships
https://www.googleapis.com/auth/chat.memberships.readonly
For more information, see the Authorization guide.
Method: spaces.members.list

bookmark_border

Release Notes
Lists memberships in a space. For an example, see List users and Google Chat apps in a space. Listing memberships with app authentication lists memberships in spaces that the Chat app has access to, but excludes Chat app memberships, including its own. Listing memberships with User authentication lists memberships in spaces that the authenticated user has access to.

Supports the following types of authentication:

App authentication with one of the following authorization scopes:

https://www.googleapis.com/auth/chat.bot
https://www.googleapis.com/auth/chat.app.memberships (requires administrator approval)
User authentication with one of the following authorization scopes:

https://www.googleapis.com/auth/chat.memberships.readonly
https://www.googleapis.com/auth/chat.memberships
https://www.googleapis.com/auth/chat.import (import mode spaces only)
User authentication grants administrator privileges when an administrator account authenticates, useAdminAccess is true, and one of the following authorization scopes is used:
https://www.googleapis.com/auth/chat.admin.memberships.readonly
https://www.googleapis.com/auth/chat.admin.memberships
HTTP request
GET https://chat.googleapis.com/v1/{parent=spaces/*}/members

The URL uses gRPC Transcoding syntax.

Path parameters
Parameters
parent	
string

Required. The resource name of the space for which to fetch a membership list.

Format: spaces/{space}

Query parameters
Parameters
pageSize	
integer

Optional. The maximum number of memberships to return. The service might return fewer than this value.

If unspecified, at most 100 memberships are returned.

The maximum value is 1000. If you use a value more than 1000, it's automatically changed to 1000.

Negative values return an INVALID_ARGUMENT error.

pageToken	
string

Optional. A page token, received from a previous call to list memberships. Provide this parameter to retrieve the subsequent page.

When paginating, all other parameters provided should match the call that provided the page token. Passing different values to the other parameters might lead to unexpected results.

filter	
string

Optional. A query filter.

You can filter memberships by a member's role (role) and type (member.type).

To filter by role, set role to ROLE_MEMBER or ROLE_MANAGER.

To filter by type, set member.type to HUMAN or BOT. You can also filter for member.type using the != operator.

To filter by both role and type, use the AND operator. To filter by either role or type, use the OR operator.

Either member.type = "HUMAN" or member.type != "BOT" is required when useAdminAccess is set to true. Other member type filters will be rejected.

For example, the following queries are valid:


role = "ROLE_MANAGER" OR role = "ROLE_MEMBER"
member.type = "HUMAN" AND role = "ROLE_MANAGER"

member.type != "BOT"
The following queries are invalid:


member.type = "HUMAN" AND member.type = "BOT"
role = "ROLE_MANAGER" AND role = "ROLE_MEMBER"
Invalid queries are rejected by the server with an INVALID_ARGUMENT error.

showGroups	
boolean

Optional. When true, also returns memberships associated with a Google Group, in addition to other types of memberships. If a filter is set, Google Group memberships that don't match the filter criteria aren't returned.

showInvited	
boolean

Optional. When true, also returns memberships associated with invited members, in addition to other types of memberships. If a filter is set, invited memberships that don't match the filter criteria aren't returned.

Currently requires user authentication.

useAdminAccess	
boolean

Optional. When true, the method runs using the user's Google Workspace administrator privileges.

The calling user must be a Google Workspace administrator with the manage chat and spaces conversations privilege.

Requires either the chat.admin.memberships.readonly or chat.admin.memberships OAuth 2.0 scope.

Listing app memberships in a space isn't supported when using admin access.

Request body
The request body must be empty.

Response body
Response to list memberships of the space.

If successful, the response body contains data with the following structure:

JSON representation

{
  "memberships": [
    {
      object (Membership)
    }
  ],
  "nextPageToken": string
}
Fields
memberships[]	
object (Membership)

Unordered list. List of memberships in the requested (or first) page.

nextPageToken	
string

A token that you can send as pageToken to retrieve the next page of results. If empty, there are no subsequent pages.

Authorization scopes
Requires one of the following OAuth scopes:

https://www.googleapis.com/auth/chat.admin.memberships
https://www.googleapis.com/auth/chat.admin.memberships.readonly
https://www.googleapis.com/auth/chat.app.memberships
https://www.googleapis.com/auth/chat.bot
https://www.googleapis.com/auth/chat.import
https://www.googleapis.com/auth/chat.memberships
https://www.googleapis.com/auth/chat.memberships.readonly
For more information, see the Authorization guide.Method: spaces.members.patch

bookmark_border

Release Notes
Updates a membership. For an example, see Update a user's membership in a space.

Supports the following types of authentication:

App authentication with administrator approval and the authorization scope:

https://www.googleapis.com/auth/chat.app.memberships (only in spaces the app created)
User authentication with one of the following authorization scopes:

https://www.googleapis.com/auth/chat.memberships
https://www.googleapis.com/auth/chat.import (import mode spaces only)
User authentication grants administrator privileges when an administrator account authenticates, useAdminAccess is true, and the following authorization scope is used:
https://www.googleapis.com/auth/chat.admin.memberships
HTTP request
PATCH https://chat.googleapis.com/v1/{membership.name=spaces/*/members/*}

The URL uses gRPC Transcoding syntax.

Path parameters
Parameters
membership.name	
string

Identifier. Resource name of the membership, assigned by the server.

Format: spaces/{space}/members/{member}

Query parameters
Parameters
updateMask	
string (FieldMask format)

Required. The field paths to update. Separate multiple values with commas or use * to update all field paths.

Currently supported field paths:

role
useAdminAccess	
boolean

Optional. When true, the method runs using the user's Google Workspace administrator privileges.

The calling user must be a Google Workspace administrator with the manage chat and spaces conversations privilege.

Requires the chat.admin.memberships OAuth 2.0 scope.

Request body
The request body contains an instance of Membership.

Response body
If successful, the response body contains an instance of Membership.

Authorization scopes
Requires one of the following OAuth scopes:

https://www.googleapis.com/auth/chat.app.memberships
https://www.googleapis.com/auth/chat.admin.memberships
https://www.googleapis.com/auth/chat.import
https://www.googleapis.com/auth/chat.memberships
For more information, see the Authorization guide.
REST Resource: spaces.messages

bookmark_border

Release Notes
Resource: Message
A message in a Google Chat space.

JSON representation

{
  "name": string,
  "sender": {
    object (User)
  },
  "createTime": string,
  "lastUpdateTime": string,
  "deleteTime": string,
  "text": string,
  "formattedText": string,
  "cards": [
    {
      object (Card)
    }
  ],
  "cardsV2": [
    {
      object (CardWithId)
    }
  ],
  "annotations": [
    {
      object (Annotation)
    }
  ],
  "thread": {
    object (Thread)
  },
  "space": {
    object (Space)
  },
  "fallbackText": string,
  "actionResponse": {
    object (ActionResponse)
  },
  "argumentText": string,
  "slashCommand": {
    object (SlashCommand)
  },
  "attachment": [
    {
      object (Attachment)
    }
  ],
  "matchedUrl": {
    object (MatchedUrl)
  },
  "threadReply": boolean,
  "clientAssignedMessageId": string,
  "emojiReactionSummaries": [
    {
      object (EmojiReactionSummary)
    }
  ],
  "privateMessageViewer": {
    object (User)
  },
  "deletionMetadata": {
    object (DeletionMetadata)
  },
  "quotedMessageMetadata": {
    object (QuotedMessageMetadata)
  },
  "attachedGifs": [
    {
      object (AttachedGif)
    }
  ],
  "accessoryWidgets": [
    {
      object (AccessoryWidget)
    }
  ]
}
Fields
name	
string

Identifier. Resource name of the message.

Format: spaces/{space}/messages/{message}

Where {space} is the ID of the space where the message is posted and {message} is a system-assigned ID for the message. For example, spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB.

If you set a custom ID when you create a message, you can use this ID to specify the message in a request by replacing {message} with the value from the clientAssignedMessageId field. For example, spaces/AAAAAAAAAAA/messages/client-custom-name. For details, see Name a message.

sender	
object (User)

Output only. The user who created the message. If your Chat app authenticates as a user, the output populates the user name and type.

createTime	
string (Timestamp format)

Optional. Immutable. For spaces created in Chat, the time at which the message was created. This field is output only, except when used in import mode spaces.

For import mode spaces, set this field to the historical timestamp at which the message was created in the source in order to preserve the original creation time.

lastUpdateTime	
string (Timestamp format)

Output only. The time at which the message was last edited by a user. If the message has never been edited, this field is empty.

deleteTime	
string (Timestamp format)

Output only. The time at which the message was deleted in Google Chat. If the message is never deleted, this field is empty.

text	
string

Optional. Plain-text body of the message. The first link to an image, video, or web page generates a preview chip. You can also @mention a Google Chat user, or everyone in the space.

To learn about creating text messages, see Send a message.

formattedText	
string

Output only. Contains the message text with markups added to communicate formatting. This field might not capture all formatting visible in the UI, but includes the following:

Markup syntax for bold, italic, strikethrough, monospace, monospace block, and bulleted list.

User mentions using the format <users/{user}>.

Custom hyperlinks using the format <{url}|{rendered_text}> where the first string is the URL and the second is the rendered text—for example, <http://example.com|custom text>.

Custom emoji using the format :{emojiName}:—for example, :smile:. This doesn't apply to Unicode emoji, such as U+1F600 for a grinning face emoji.

For more information, see View text formatting sent in a message

cards[]
(deprecated)	
object (Card)

This item is deprecated!

Deprecated: Use cardsV2 instead.

Rich, formatted, and interactive cards that you can use to display UI elements such as: formatted texts, buttons, and clickable images. Cards are normally displayed below the plain-text body of the message. cards and cardsV2 can have a maximum size of 32 KB.

cardsV2[]	
object (CardWithId)

Optional. An array of cards.

Only Chat apps can create cards. If your Chat app authenticates as a user, the messages can't contain cards.

To learn how to create a message that contains cards, see Send a message.

Design and preview cards with the Card Builder.

Open the Card Builder
annotations[]	
object (Annotation)

Output only. Annotations can be associated with the plain-text body of the message or with chips that link to Google Workspace resources like Google Docs or Sheets with startIndex and length of 0.

thread	
object (Thread)

The thread the message belongs to. For example usage, see Start or reply to a message thread.

space	
object (Space)

Output only. If your Chat app authenticates as a user, the output only populates the space name.

fallbackText	
string

Optional. A plain-text description of the message's cards, used when the actual cards can't be displayed—for example, mobile notifications.

actionResponse	
object (ActionResponse)

Input only. Parameters that a Chat app can use to configure how its response is posted.

argumentText	
string

Output only. Plain-text body of the message with all Chat app mentions stripped out.

slashCommand	
object (SlashCommand)

Output only. Slash command information, if applicable.

attachment[]	
object (Attachment)

Optional. User-uploaded attachment.

matchedUrl	
object (MatchedUrl)

Output only. A URL in spaces.messages.text that matches a link preview pattern. For more information, see Preview links.

threadReply	
boolean

Output only. When true, the message is a response in a reply thread. When false, the message is visible in the space's top-level conversation as either the first message of a thread or a message with no threaded replies.

If the space doesn't support reply in threads, this field is always false.

clientAssignedMessageId	
string

Optional. A custom ID for the message. You can use field to identify a message, or to get, delete, or update a message. To set a custom ID, specify the messageId field when you create the message. For details, see Name a message.

emojiReactionSummaries[]	
object (EmojiReactionSummary)

Output only. The list of emoji reaction summaries on the message.

privateMessageViewer	
object (User)

Optional. Immutable. Input for creating a message, otherwise output only. The user that can view the message. When set, the message is private and only visible to the specified user and the Chat app. To include this field in your request, you must call the Chat API using app authentication and omit the following:

Attachments
Accessory widgets
For details, see Send a message privately.

deletionMetadata	
object (DeletionMetadata)

Output only. Information about a deleted message. A message is deleted when deleteTime is set.

quotedMessageMetadata	
object (QuotedMessageMetadata)

Output only. Information about a message that another message quotes.

When you create a message, you can quote messages within the same thread, or quote a root message to create a new root message. However, you can't quote a message reply from a different thread.

When you update a message, you can't add or replace the quotedMessageMetadata field, but you can remove it.

For example usage, see Quote another message.

attachedGifs[]	
object (AttachedGif)

Output only. GIF images that are attached to the message.

accessoryWidgets[]	
object (AccessoryWidget)

Optional. One or more interactive widgets that appear at the bottom of a message. You can add accessory widgets to messages that contain text, cards, or both text and cards. Not supported for messages that contain dialogs. For details, see Add interactive widgets at the bottom of a message.

Creating a message with accessory widgets requires app authentication.

CardWithId
A card in a Google Chat message.

Only Chat apps can create cards. If your Chat app authenticates as a user, the message can't contain cards.

Design and preview cards with the Card Builder.

Open the Card Builder
JSON representation

{
  "cardId": string,
  "card": {
    object (Card)
  }
}
Fields
cardId	
string

Required if the message contains multiple cards. A unique identifier for a card in a message.

card	
object (Card)

A card. Maximum size is 32 KB.

Annotation
Output only. Annotations can be associated with the plain-text body of the message or with chips that link to Google Workspace resources like Google Docs or Sheets with startIndex and length of 0. To add basic formatting to a text message, see Format text messages.

Example plain-text message body:


Hello @FooBot how are you!"
The corresponding annotations metadata:


"annotations":[{
  "type":"USER_MENTION",
  "startIndex":6,
  "length":7,
  "userMention": {
    "user": {
      "name":"users/{user}",
      "displayName":"FooBot",
      "avatarUrl":"https://goo.gl/aeDtrS",
      "type":"BOT"
    },
    "type":"MENTION"
   }
}]
JSON representation

{
  "type": enum (AnnotationType),
  "length": integer,
  "startIndex": integer,

  // Union field metadata can be only one of the following:
  "userMention": {
    object (UserMentionMetadata)
  },
  "slashCommand": {
    object (SlashCommandMetadata)
  },
  "richLinkMetadata": {
    object (RichLinkMetadata)
  },
  "customEmojiMetadata": {
    object (CustomEmojiMetadata)
  }
  // End of list of possible types for union field metadata.
}
Fields
type	
enum (AnnotationType)

The type of this annotation.

length	
integer

Length of the substring in the plain-text message body this annotation corresponds to. If not present, indicates a length of 0.

startIndex	
integer

Start index (0-based, inclusive) in the plain-text message body this annotation corresponds to.

Union field metadata. Additional metadata about the annotation. metadata can be only one of the following:
userMention	
object (UserMentionMetadata)

The metadata of user mention.

slashCommand	
object (SlashCommandMetadata)

The metadata for a slash command.

richLinkMetadata	
object (RichLinkMetadata)

The metadata for a rich link.

customEmojiMetadata	
object (CustomEmojiMetadata)

The metadata for a custom emoji.

AnnotationType
Type of the annotation.

Enums
ANNOTATION_TYPE_UNSPECIFIED	Default value for the enum. Don't use.
USER_MENTION	A user is mentioned.
SLASH_COMMAND	A slash command is invoked.
RICH_LINK	A rich link annotation.
CUSTOM_EMOJI	A custom emoji annotation.
UserMentionMetadata
Annotation metadata for user mentions (@).

JSON representation

{
  "user": {
    object (User)
  },
  "type": enum (Type)
}
Fields
user	
object (User)

The user mentioned.

type	
enum (Type)

The type of user mention.

Type
Enums
TYPE_UNSPECIFIED	Default value for the enum. Don't use.
ADD	Add user to space.
MENTION	Mention user in space.
SlashCommandMetadata
Annotation metadata for slash commands (/).

JSON representation

{
  "bot": {
    object (User)
  },
  "type": enum (Type),
  "commandName": string,
  "commandId": string,
  "triggersDialog": boolean
}
Fields
bot	
object (User)

The Chat app whose command was invoked.

type	
enum (Type)

The type of slash command.

commandName	
string

The name of the invoked slash command.

commandId	
string (int64 format)

The command ID of the invoked slash command.

triggersDialog	
boolean

Indicates whether the slash command is for a dialog.

Type
Enums
TYPE_UNSPECIFIED	Default value for the enum. Don't use.
ADD	Add Chat app to space.
INVOKE	Invoke slash command in space.
RichLinkMetadata
A rich link to a resource. Rich links can be associated with the plain-text body of the message or represent chips that link to Google Workspace resources like Google Docs or Sheets with startIndex and length of 0.

JSON representation

{
  "uri": string,
  "richLinkType": enum (RichLinkType),

  // Union field data can be only one of the following:
  "driveLinkData": {
    object (DriveLinkData)
  },
  "chatSpaceLinkData": {
    object (ChatSpaceLinkData)
  },
  "meetSpaceLinkData": {
    object (MeetSpaceLinkData)
  },
  "calendarEventLinkData": {
    object (CalendarEventLinkData)
  }
  // End of list of possible types for union field data.
}
Fields
uri	
string

The URI of this link.

richLinkType	
enum (RichLinkType)

The rich link type.

Union field data. Data for the linked resource. data can be only one of the following:
driveLinkData	
object (DriveLinkData)

Data for a drive link.

chatSpaceLinkData	
object (ChatSpaceLinkData)

Data for a chat space link.

meetSpaceLinkData	
object (MeetSpaceLinkData)

Data for a Meet space link.

calendarEventLinkData	
object (CalendarEventLinkData)

Data for a Calendar event link.

RichLinkType
The rich link type. More types might be added in the future.

Enums
RICH_LINK_TYPE_UNSPECIFIED	Default value for the enum. Don't use.
DRIVE_FILE	A Google Drive rich link type.
CHAT_SPACE	A Chat space rich link type. For example, a space smart chip.
MEET_SPACE	A Meet message rich link type. For example, a Meet chip.
CALENDAR_EVENT	A Calendar message rich link type. For example, a Calendar chip.
DriveLinkData
Data for Google Drive links.

JSON representation

{
  "driveDataRef": {
    object (DriveDataRef)
  },
  "mimeType": string
}
Fields
driveDataRef	
object (DriveDataRef)

A DriveDataRef which references a Google Drive file.

mimeType	
string

The mime type of the linked Google Drive resource.

ChatSpaceLinkData
Data for Chat space links.

JSON representation

{
  "space": string,
  "thread": string,
  "message": string
}
Fields
space	
string

The space of the linked Chat space resource.

Format: spaces/{space}

thread	
string

The thread of the linked Chat space resource.

Format: spaces/{space}/threads/{thread}

message	
string

The message of the linked Chat space resource.

Format: spaces/{space}/messages/{message}

MeetSpaceLinkData
Data for Meet space links.

JSON representation

{
  "meetingCode": string,
  "type": enum (Type),
  "huddleStatus": enum (HuddleStatus)
}
Fields
meetingCode	
string

Meeting code of the linked Meet space.

type	
enum (Type)

Indicates the type of the Meet space.

huddleStatus	
enum (HuddleStatus)

Optional. Output only. If the Meet is a Huddle, indicates the status of the huddle. Otherwise, this is unset.

Type
The type of the Meet space.

Enums
TYPE_UNSPECIFIED	Default value for the enum. Don't use.
MEETING	The Meet space is a meeting.
HUDDLE	The Meet space is a huddle.
HuddleStatus
The status of the huddle

Enums
HUDDLE_STATUS_UNSPECIFIED	Default value for the enum. Don't use.
STARTED	The huddle has started.
ENDED	The huddle has ended. In this case the Meet space URI and identifiers will no longer be valid.
MISSED	The huddle has been missed. In this case the Meet space URI and identifiers will no longer be valid.
CalendarEventLinkData
Data for Calendar event links.

JSON representation

{
  "calendarId": string,
  "eventId": string
}
Fields
calendarId	
string

The Calendar identifier of the linked Calendar.

eventId	
string

The Event identifier of the linked Calendar event.

CustomEmojiMetadata
Annotation metadata for custom emoji.

JSON representation

{
  "customEmoji": {
    object (CustomEmoji)
  }
}
Fields
customEmoji	
object (CustomEmoji)

The custom emoji.

Thread
A thread in a Google Chat space. For example usage, see Start or reply to a message thread.

If you specify a thread when creating a message, you can set the messageReplyOption field to determine what happens if no matching thread is found.

JSON representation

{
  "name": string,
  "threadKey": string
}
Fields
name	
string

Identifier. Resource name of the thread.

Example: spaces/{space}/threads/{thread}

threadKey	
string

Optional. Input for creating or updating a thread. Otherwise, output only. ID for the thread. Supports up to 4000 characters.

This ID is unique to the Chat app that sets it. For example, if multiple Chat apps create a message using the same thread key, the messages are posted in different threads. To reply in a thread created by a person or another Chat app, specify the thread name field instead.

ActionResponse
Parameters that a Chat app can use to configure how its response is posted.

JSON representation

{
  "type": enum (ResponseType),
  "url": string,
  "dialogAction": {
    object (DialogAction)
  },
  "updatedWidget": {
    object (UpdatedWidget)
  }
}
Fields
type	
enum (ResponseType)

Input only. The type of Chat app response.

url	
string

Input only. URL for users to authenticate or configure. (Only for REQUEST_CONFIG response types.)

dialogAction	
object (DialogAction)

Input only. A response to an interaction event related to a dialog. Must be accompanied by ResponseType.Dialog.

updatedWidget	
object (UpdatedWidget)

Input only. The response of the updated widget.

ResponseType
The type of Chat app response.

Enums
TYPE_UNSPECIFIED	Default type that's handled as NEW_MESSAGE.
NEW_MESSAGE	Post as a new message in the topic.
UPDATE_MESSAGE	Update the Chat app's message. This is only permitted on a CARD_CLICKED event where the message sender type is BOT.
UPDATE_USER_MESSAGE_CARDS	Update the cards on a user's message. This is only permitted as a response to a MESSAGE event with a matched url, or a CARD_CLICKED event where the message sender type is HUMAN. Text is ignored.
REQUEST_CONFIG	Privately ask the user for additional authentication or configuration.
DIALOG	Presents a dialog.
UPDATE_WIDGET	Widget text autocomplete options query.
DialogAction
Contains a dialog and request status code.

JSON representation

{
  "actionStatus": {
    object (ActionStatus)
  },

  // Union field action can be only one of the following:
  "dialog": {
    object (Dialog)
  }
  // End of list of possible types for union field action.
}
Fields
actionStatus	
object (ActionStatus)

Input only. Status for a request to either invoke or submit a dialog. Displays a status and message to users, if necessary. For example, in case of an error or success.

Union field action. Action to perform. action can be only one of the following:
dialog	
object (Dialog)

Input only. Dialog for the request.

Dialog
Wrapper around the card body of the dialog.

JSON representation

{
  "body": {
    object (Card)
  }
}
Fields
body	
object (Card)

Input only. Body of the dialog, which is rendered in a modal. Google Chat apps don't support the following card entities: DateTimePicker, OnChangeAction.

ActionStatus
Represents the status for a request to either invoke or submit a dialog.

JSON representation

{
  "statusCode": enum (Code),
  "userFacingMessage": string
}
Fields
statusCode	
enum (Code)

The status code.

userFacingMessage	
string

The message to send users about the status of their request. If unset, a generic message based on the statusCode is sent.

Code
The canonical error codes for gRPC APIs.

Sometimes multiple error codes may apply. Services should return the most specific error code that applies. For example, prefer OUT_OF_RANGE over FAILED_PRECONDITION if both codes apply. Similarly prefer NOT_FOUND or ALREADY_EXISTS over FAILED_PRECONDITION.

Enums
OK	
Not an error; returned on success.

HTTP Mapping: 200 OK

CANCELLED	
The operation was cancelled, typically by the caller.

HTTP Mapping: 499 Client Closed Request

UNKNOWN	
Unknown error. For example, this error may be returned when a Status value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error.

HTTP Mapping: 500 Internal Server Error

INVALID_ARGUMENT	
The client specified an invalid argument. Note that this differs from FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name).

HTTP Mapping: 400 Bad Request

DEADLINE_EXCEEDED	
The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire.

HTTP Mapping: 504 Gateway Timeout

NOT_FOUND	
Some requested entity (e.g., file or directory) was not found.

Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, NOT_FOUND may be used. If a request is denied for some users within a class of users, such as user-based access control, PERMISSION_DENIED must be used.

HTTP Mapping: 404 Not Found

ALREADY_EXISTS	
The entity that a client attempted to create (e.g., file or directory) already exists.

HTTP Mapping: 409 Conflict

PERMISSION_DENIED	
The caller does not have permission to execute the specified operation. PERMISSION_DENIED must not be used for rejections caused by exhausting some resource (use RESOURCE_EXHAUSTED instead for those errors). PERMISSION_DENIED must not be used if the caller can not be identified (use UNAUTHENTICATED instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions.

HTTP Mapping: 403 Forbidden

UNAUTHENTICATED	
The request does not have valid authentication credentials for the operation.

HTTP Mapping: 401 Unauthorized

RESOURCE_EXHAUSTED	
Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space.

HTTP Mapping: 429 Too Many Requests

FAILED_PRECONDITION	
The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc.

Service implementors can use the following guidelines to decide between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE: (a) Use UNAVAILABLE if the client can retry just the failing call. (b) Use ABORTED if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use FAILED_PRECONDITION if the client should not retry until the system state has been explicitly fixed. For example, if an "rmdir" fails because the directory is non-empty, FAILED_PRECONDITION should be returned since the client should not retry unless the files are deleted from the directory.

HTTP Mapping: 400 Bad Request

ABORTED	
The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort.

See the guidelines above for deciding between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE.

HTTP Mapping: 409 Conflict

OUT_OF_RANGE	
The operation was attempted past the valid range. E.g., seeking or reading past end-of-file.

Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate INVALID_ARGUMENT if asked to read at an offset that is not in the range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from an offset past the current file size.

There is a fair bit of overlap between FAILED_PRECONDITION and OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error) when it applies so that callers who are iterating through a space can easily look for an OUT_OF_RANGE error to detect when they are done.

HTTP Mapping: 400 Bad Request

UNIMPLEMENTED	
The operation is not implemented or is not supported/enabled in this service.

HTTP Mapping: 501 Not Implemented

INTERNAL	
Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors.

HTTP Mapping: 500 Internal Server Error

UNAVAILABLE	
The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations.

See the guidelines above for deciding between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE.

HTTP Mapping: 503 Service Unavailable

DATA_LOSS	
Unrecoverable data loss or corruption.

HTTP Mapping: 500 Internal Server Error

UpdatedWidget
For selectionInput widgets, returns autocomplete suggestions for a multiselect menu.

JSON representation

{
  "widget": string,

  // Union field updated_widget can be only one of the following:
  "suggestions": {
    object (SelectionItems)
  }
  // End of list of possible types for union field updated_widget.
}
Fields
widget	
string

The ID of the updated widget. The ID must match the one for the widget that triggered the update request.

Union field updated_widget. The widget updated in response to a user action. updated_widget can be only one of the following:
suggestions	
object (SelectionItems)

List of widget autocomplete results

SelectionItems
List of widget autocomplete results.

JSON representation

{
  "items": [
    {
      object (SelectionItem)
    }
  ]
}
Fields
items[]	
object (SelectionItem)

An array of the SelectionItem objects.

SlashCommand
Metadata about a slash command in Google Chat.

JSON representation

{
  "commandId": string
}
Fields
commandId	
string (int64 format)

The ID of the slash command.

MatchedUrl
A matched URL in a Chat message. Chat apps can preview matched URLs. For more information, see Preview links.

JSON representation

{
  "url": string
}
Fields
url	
string

Output only. The URL that was matched.

EmojiReactionSummary
The number of people who reacted to a message with a specific emoji.

JSON representation

{
  "emoji": {
    object (Emoji)
  },
  "reactionCount": integer
}
Fields
emoji	
object (Emoji)

Output only. Emoji associated with the reactions.

reactionCount	
integer

Output only. The total number of reactions using the associated emoji.

DeletionMetadata
Information about a deleted message. A message is deleted when deleteTime is set.

JSON representation

{
  "deletionType": enum (DeletionType)
}
Fields
deletionType	
enum (DeletionType)

Indicates who deleted the message.

DeletionType
Who deleted the message and how it was deleted. More values may be added in the future. See Edit or delete a message in Google Chat for details on when messages can be deleted.

Enums
DELETION_TYPE_UNSPECIFIED	This value is unused.
CREATOR	User deleted their own message.
SPACE_OWNER	A space manager deleted the message.
ADMIN	A Google Workspace administrator deleted the message. Administrators can delete any message in the space, including messages sent by any space member or Chat app.
APP_MESSAGE_EXPIRY	A Chat app deleted its own message when it expired.
CREATOR_VIA_APP	A Chat app deleted the message on behalf of the creator (using user authentication).
SPACE_OWNER_VIA_APP	A Chat app deleted the message on behalf of a space manager (using user authentication).
SPACE_MEMBER	A member of the space deleted the message. Users can delete messages sent by apps.
QuotedMessageMetadata
Information about a message that another message quotes.

When you create a message, you can quote messages within the same thread, or quote a root message to create a new root message. However, you can't quote a message reply from a different thread.

When you update a message, you can't add or replace the quotedMessageMetadata field, but you can remove it.

For example usage, see Quote another message.

JSON representation

{
  "name": string,
  "lastUpdateTime": string
}
Fields
name	
string

Output only. Resource name of the quoted message.

Format: spaces/{space}/messages/{message}

lastUpdateTime	
string (Timestamp format)

Output only. The timestamp when the quoted message was created or when the quoted message was last updated.

If the message was edited, use this field, lastUpdateTime. If the message was never edited, use createTime.

If lastUpdateTime doesn't match the latest version of the quoted message, the request fails.

AttachedGif
A GIF image that's specified by a URL.

JSON representation

{
  "uri": string
}
Fields
uri	
string

Output only. The URL that hosts the GIF image.

AccessoryWidget
One or more interactive widgets that appear at the bottom of a message. For details, see Add interactive widgets at the bottom of a message.

JSON representation

{

  // Union field action can be only one of the following:
  "buttonList": {
    object (ButtonList)
  }
  // End of list of possible types for union field action.
}
Fields
Union field action. The type of action. action can be only one of the following:
buttonList	
object (ButtonList)

A list of buttons.

Methods
create
Creates a message in a Google Chat space.
delete
Deletes a message.
get
Returns details about a message.
list
Lists messages in a space that the caller is a member of, including messages from blocked members and spaces.
patch
Updates a message.
update
Updates a message.

Cards v2

bookmark_border

Card 
A card interface displayed in a Google Chat message or Google Workspace add-on.

Cards support a defined layout, interactive UI elements like buttons, and rich media like images. Use cards to present detailed information, gather information from users, and guide users to take a next step.


Design and preview cards with the Card Builder.

Open the Card Builder

To learn how to build cards, see the following documentation:

For Google Chat apps, see Design the components of a card or dialog.
For Google Workspace add-ons, see Card-based interfaces.
Note: You can add up to 100 widgets per card. Any widgets beyond this limit are ignored. This limit applies to both card messages and dialogs in Google Chat apps, and to cards in Google Workspace add-ons.

Example: Card message for a Google Chat app

Example contact card

To create the sample card message in Google Chat, use the following JSON:


{
  "cardsV2": [
    {
      "cardId": "unique-card-id",
      "card": {
        "header": {
           "title": "Sasha",
           "subtitle": "Software Engineer",
           "imageUrl":
           "https://developers.google.com/workspace/chat/images/quickstart-app-avatar.png",
           "imageType": "CIRCLE",
           "imageAltText": "Avatar for Sasha"
         },
         "sections": [
           {
             "header": "Contact Info",
             "collapsible": true,
             "uncollapsibleWidgetsCount": 1,
             "widgets": [
               {
                 "decoratedText": {
                   "startIcon": {
                     "knownIcon": "EMAIL"
                   },
                   "text": "sasha@example.com"
                 }
               },
               {
                 "decoratedText": {
                   "startIcon": {
                     "knownIcon": "PERSON"
                   },
                   "text": "<font color=\"#80e27e\">Online</font>"
                 }
               },
               {
                 "decoratedText": {
                   "startIcon": {
                     "knownIcon": "PHONE"
                   },
                   "text": "+1 (555) 555-1234"
                 }
               },
               {
                 "buttonList": {
                   "buttons": [
                     {
                       "text": "Share",
                       "onClick": {
                        "openLink": {
                           "url": "https://example.com/share"
                         }
                       }
                     },
                     {
                       "text": "Edit",
                       "onClick": {
                         "action": {
                           "function": "goToView",
                           "parameters": [
                             {
                               "key": "viewType",
                               "value": "EDIT"
                             }
                           ]
                         }
                       }
                     }
                   ]
                 }
               }
             ]
           }
         ]
       }
    }
  ]
}
JSON representation

{
  "header": {
    object (CardHeader)
  },
  "sections": [
    {
      object (Section)
    }
  ],
  "sectionDividerStyle": enum (DividerStyle),
  "cardActions": [
    {
      object (CardAction)
    }
  ],
  "name": string,
  "fixedFooter": {
    object (CardFixedFooter)
  },
  "displayStyle": enum (DisplayStyle),
  "peekCardHeader": {
    object (CardHeader)
  }
}
Fields
header	
object (CardHeader)

The header of the card. A header usually contains a leading image and a title. Headers always appear at the top of a card.

sections[]	
object (Section)

Contains a collection of widgets. Each section has its own, optional header. Sections are visually separated by a line divider. For an example in Google Chat apps, see Define a section of a card.

sectionDividerStyle	
enum (DividerStyle)

The divider style between the header, sections and footer.

cardActions[]	
object (CardAction)

The card's actions. Actions are added to the card's toolbar menu.

 Available for Google Workspace add-ons and unavailable for Google Chat apps.

For example, the following JSON constructs a card action menu with Settings and Send Feedback options:


"cardActions": [
  {
    "actionLabel": "Settings",
    "onClick": {
      "action": {
        "functionName": "goToView",
        "parameters": [
          {
            "key": "viewType",
            "value": "SETTING"
         }
        ],
        "loadIndicator": "LoadIndicator.SPINNER"
      }
    }
  },
  {
    "actionLabel": "Send Feedback",
    "onClick": {
      "openLink": {
        "url": "https://example.com/feedback"
      }
    }
  }
]
name	
string

Name of the card. Used as a card identifier in card navigation.

 Available for Google Workspace add-ons and unavailable for Google Chat apps.

fixedFooter	
object (CardFixedFooter)

The fixed footer shown at the bottom of this card.

Setting fixedFooter without specifying a primaryButton or a secondaryButton causes an error. For Chat apps, you can use fixed footers in dialogs, but not card messages.

  Available for Google Chat apps and Google Workspace add-ons.

displayStyle	
enum (DisplayStyle)

In Google Workspace add-ons, sets the display properties of the peekCardHeader.

 Available for Google Workspace add-ons and unavailable for Google Chat apps.

peekCardHeader	
object (CardHeader)

When displaying contextual content, the peek card header acts as a placeholder so that the user can navigate forward between the homepage cards and the contextual cards.

 Available for Google Workspace add-ons and unavailable for Google Chat apps.

CardHeader 
Represents a card header. For an example in Google Chat apps, see Add a header.

  Available for Google Chat apps and Google Workspace add-ons.

JSON representation

{
  "title": string,
  "subtitle": string,
  "imageType": enum (ImageType),
  "imageUrl": string,
  "imageAltText": string
}
Fields
title	
string

Required. The title of the card header. The header has a fixed height: if both a title and subtitle are specified, each takes up one line. If only the title is specified, it takes up both lines.

subtitle	
string

The subtitle of the card header. If specified, appears on its own line below the title.

imageType	
enum (ImageType)

The shape used to crop the image.

  Available for Google Chat apps and Google Workspace add-ons.

imageUrl	
string

The HTTPS URL of the image in the card header.

imageAltText	
string

The alternative text of this image that's used for accessibility.

ImageType 
The shape used to crop the image.

  Available for Google Chat apps and Google Workspace add-ons.

Enums
SQUARE	Default value. Applies a square mask to the image. For example, a 4x3 image becomes 3x3.
CIRCLE	Applies a circular mask to the image. For example, a 4x3 image becomes a circle with a diameter of 3.
Section 
A section contains a collection of widgets that are rendered vertically in the order that they're specified.

  Available for Google Chat apps and Google Workspace add-ons.

JSON representation

{
  "header": string,
  "widgets": [
    {
      object (Widget)
    }
  ],
  "collapsible": boolean,
  "uncollapsibleWidgetsCount": integer,
  "collapseControl": {
    object (CollapseControl)
  }
}
Fields
header	
string

Text that appears at the top of a section. Supports simple HTML formatted text. For more information about formatting text, see Formatting text in Google Chat apps and Formatting text in Google Workspace add-ons.

widgets[]	
object (Widget)

All the widgets in the section. Must contain at least one widget.

collapsible	
boolean

Indicates whether this section is collapsible.

Collapsible sections hide some or all widgets, but users can expand the section to reveal the hidden widgets by clicking Show more. Users can hide the widgets again by clicking Show less.

To determine which widgets are hidden, specify uncollapsibleWidgetsCount.

uncollapsibleWidgetsCount	
integer

The number of uncollapsible widgets which remain visible even when a section is collapsed.

For example, when a section contains five widgets and the uncollapsibleWidgetsCount is set to 2, the first two widgets are always shown and the last three are collapsed by default. The uncollapsibleWidgetsCount is taken into account only when collapsible is true.

collapseControl	
object (CollapseControl)

Optional. Define the expand and collapse button of the section. This button will be shown only if the section is collapsible. If this field isn't set, the default button is used.

Widget 
Each card is made up of widgets.

A widget is a composite object that can represent one of text, images, buttons, and other object types.

JSON representation

{
  "horizontalAlignment": enum (HorizontalAlignment),

  // Union field data can be only one of the following:
  "textParagraph": {
    object (TextParagraph)
  },
  "image": {
    object (Image)
  },
  "decoratedText": {
    object (DecoratedText)
  },
  "buttonList": {
    object (ButtonList)
  },
  "textInput": {
    object (TextInput)
  },
  "selectionInput": {
    object (SelectionInput)
  },
  "dateTimePicker": {
    object (DateTimePicker)
  },
  "divider": {
    object (Divider)
  },
  "grid": {
    object (Grid)
  },
  "columns": {
    object (Columns)
  },
  "carousel": {
    object (Carousel)
  },
  "chipList": {
    object (ChipList)
  }
  // End of list of possible types for union field data.
}
Fields
horizontalAlignment	
enum (HorizontalAlignment)

Specifies whether widgets align to the left, right, or center of a column.

Union field data. A widget can only have one of the following items. You can use multiple widget fields to display more items. data can be only one of the following:
textParagraph	
object (TextParagraph)

Displays a text paragraph. Supports simple HTML formatted text. For more information about formatting text, see Formatting text in Google Chat apps and Formatting text in Google Workspace add-ons.

For example, the following JSON creates a bolded text:


"textParagraph": {
  "text": "  <b>bold text</b>"
}
image	
object (Image)

Displays an image.

For example, the following JSON creates an image with alternative text:


"image": {
  "imageUrl":
  "https://developers.google.com/workspace/chat/images/quickstart-app-avatar.png",
  "altText": "Chat app avatar"
}
decoratedText	
object (DecoratedText)

Displays a decorated text item.

For example, the following JSON creates a decorated text widget showing email address:


"decoratedText": {
  "icon": {
    "knownIcon": "EMAIL"
  },
  "topLabel": "Email Address",
  "text": "sasha@example.com",
  "bottomLabel": "This is a new Email address!",
  "switchControl": {
    "name": "has_send_welcome_email_to_sasha",
    "selected": false,
    "controlType": "CHECKBOX"
  }
}
buttonList	
object (ButtonList)

A list of buttons.

For example, the following JSON creates two buttons. The first is a blue text button and the second is an image button that opens a link:


"buttonList": {
  "buttons": [
    {
      "text": "Edit",
      "color": {
        "red": 0,
        "green": 0,
        "blue": 1,
      },
      "disabled": true,
    },
    {
      "icon": {
        "knownIcon": "INVITE",
        "altText": "check calendar"
      },
      "onClick": {
        "openLink": {
          "url": "https://example.com/calendar"
        }
      }
    }
  ]
}
textInput	
object (TextInput)

Displays a text box that users can type into.

For example, the following JSON creates a text input for an email address:


"textInput": {
  "name": "mailing_address",
  "label": "Mailing Address"
}
As another example, the following JSON creates a text input for a programming language with static suggestions:


"textInput": {
  "name": "preferred_programing_language",
  "label": "Preferred Language",
  "initialSuggestions": {
    "items": [
      {
        "text": "C++"
      },
      {
        "text": "Java"
      },
      {
        "text": "JavaScript"
      },
      {
        "text": "Python"
      }
    ]
  }
}
selectionInput	
object (SelectionInput)

Displays a selection control that lets users select items. Selection controls can be checkboxes, radio buttons, switches, or dropdown menus.

For example, the following JSON creates a dropdown menu that lets users choose a size:


"selectionInput": {
  "name": "size",
  "label": "Size"
  "type": "DROPDOWN",
  "items": [
    {
      "text": "S",
      "value": "small",
      "selected": false
    },
    {
      "text": "M",
      "value": "medium",
      "selected": true
    },
    {
      "text": "L",
      "value": "large",
      "selected": false
    },
    {
      "text": "XL",
      "value": "extra_large",
      "selected": false
    }
  ]
}
dateTimePicker	
object (DateTimePicker)

Displays a widget that lets users input a date, time, or date and time.

For example, the following JSON creates a date time picker to schedule an appointment:


"dateTimePicker": {
  "name": "appointment_time",
  "label": "Book your appointment at:",
  "type": "DATE_AND_TIME",
  "valueMsEpoch": 796435200000
}
divider	
object (Divider)

Displays a horizontal line divider between widgets.

For example, the following JSON creates a divider:


"divider": {
}
grid	
object (Grid)

Displays a grid with a collection of items.

A grid supports any number of columns and items. The number of rows is determined by the upper bounds of the number items divided by the number of columns. A grid with 10 items and 2 columns has 5 rows. A grid with 11 items and 2 columns has 6 rows.

  Available for Google Chat apps and Google Workspace add-ons.

For example, the following JSON creates a 2 column grid with a single item:


"grid": {
  "title": "A fine collection of items",
  "columnCount": 2,
  "borderStyle": {
    "type": "STROKE",
    "cornerRadius": 4
  },
  "items": [
    {
      "image": {
        "imageUri": "https://www.example.com/image.png",
        "cropStyle": {
          "type": "SQUARE"
        },
        "borderStyle": {
          "type": "STROKE"
        }
      },
      "title": "An item",
      "textAlignment": "CENTER"
    }
  ],
  "onClick": {
    "openLink": {
      "url": "https://www.example.com"
    }
  }
}
columns	
object (Columns)

Displays up to 2 columns.

To include more than 2 columns, or to use rows, use the Grid widget.

For example, the following JSON creates 2 columns that each contain text paragraphs:


"columns": {
  "columnItems": [
    {
      "horizontalSizeStyle": "FILL_AVAILABLE_SPACE",
      "horizontalAlignment": "CENTER",
      "verticalAlignment": "CENTER",
      "widgets": [
        {
          "textParagraph": {
            "text": "First column text paragraph"
          }
        }
      ]
    },
    {
      "horizontalSizeStyle": "FILL_AVAILABLE_SPACE",
      "horizontalAlignment": "CENTER",
      "verticalAlignment": "CENTER",
      "widgets": [
        {
          "textParagraph": {
            "text": "Second column text paragraph"
          }
        }
      ]
    }
  ]
}
carousel	
object (Carousel)

A carousel contains a collection of nested widgets. For example, this is a JSON representation of a carousel that contains two text paragraphs.


{
  "widgets": [
    {
      "textParagraph": {
        "text": "First text paragraph in the carousel."
      }
    },
    {
      "textParagraph": {
        "text": "Second text paragraph in the carousel."
      }
    }
  ]
}
chipList	
object (ChipList)

A list of chips.

For example, the following JSON creates two chips. The first is a text chip and the second is an icon chip that opens a link:


"chipList": {
  "chips": [
    {
      "text": "Edit",
      "disabled": true,
    },
    {
      "icon": {
        "knownIcon": "INVITE",
        "altText": "check calendar"
      },
      "onClick": {
        "openLink": {
          "url": "https://example.com/calendar"
        }
      }
    }
  ]
}
TextParagraph 
A paragraph of text that supports formatting. For an example in Google Chat apps, see Add a paragraph of formatted text. For more information about formatting text, see Formatting text in Google Chat apps and Formatting text in Google Workspace add-ons.

  Available for Google Chat apps and Google Workspace add-ons.

JSON representation

{
  "text": string,
  "maxLines": integer,
  "textSyntax": enum (TextSyntax)
}
Fields
text	
string

The text that's shown in the widget.

maxLines	
integer

The maximum number of lines of text that are displayed in the widget. If the text exceeds the specified maximum number of lines, the excess content is concealed behind a show more button. If the text is equal or shorter than the specified maximum number of lines, a show more button isn't displayed.

The default value is 0, in which case all context is displayed. Negative values are ignored.

textSyntax	
enum (TextSyntax)

The syntax of the text. If not set, the text is rendered as HTML.

Developer Preview: Available as part of the Google Workspace Developer Preview Program, which grants early access to certain features.

 Available for Google Chat apps and unavailable for Google Workspace add-ons.

TextSyntax 
Syntax to use for formatting text.

Developer Preview: Available as part of the Google Workspace Developer Preview Program, which grants early access to certain features.

 Available for Google Chat apps and unavailable for Google Workspace add-ons.

Enums
TEXT_SYNTAX_UNSPECIFIED	The text is rendered as HTML if unspecified.
HTML	The text is rendered as HTML. This is the default value.
MARKDOWN	The text is rendered as Markdown.
Image 
An image that is specified by a URL and can have an onClick action. For an example, see Add an image.

  Available for Google Chat apps and Google Workspace add-ons.

JSON representation

{
  "imageUrl": string,
  "onClick": {
    object (OnClick)
  },
  "altText": string
}
Fields
imageUrl	
string

The HTTPS URL that hosts the image.

For example:


https://developers.google.com/workspace/chat/images/quickstart-app-avatar.png
onClick	
object (OnClick)

When a user clicks the image, the click triggers this action.

altText	
string

The alternative text of this image that's used for accessibility.

OnClick 
Represents how to respond when users click an interactive element on a card, such as a button.

  Available for Google Chat apps and Google Workspace add-ons.

JSON representation

{

  // Union field data can be only one of the following:
  "action": {
    object (Action)
  },
  "openLink": {
    object (OpenLink)
  },
  "openDynamicLinkAction": {
    object (Action)
  },
  "card": {
    object (Card)
  },
  "overflowMenu": {
    object (OverflowMenu)
  }
  // End of list of possible types for union field data.
}
Fields
Union field data.

data can be only one of the following:

action	
object (Action)

If specified, an action is triggered by this onClick.

openLink	
object (OpenLink)

If specified, this onClick triggers an open link action.

openDynamicLinkAction	
object (Action)

An add-on triggers this action when the action needs to open a link. This differs from the openLink above in that this needs to talk to server to get the link. Thus some preparation work is required for web client to do before the open link action response comes back.

 Available for Google Workspace add-ons and unavailable for Google Chat apps.

card	
object (Card)

A new card is pushed to the card stack after clicking if specified.

 Available for Google Workspace add-ons and unavailable for Google Chat apps.

overflowMenu	
object (OverflowMenu)

If specified, this onClick opens an overflow menu.

Action 
An action that describes the behavior when the form is submitted. For example, you can invoke an Apps Script script to handle the form. If the action is triggered, the form values are sent to the server.

  Available for Google Chat apps and Google Workspace add-ons.

JSON representation

{
  "function": string,
  "parameters": [
    {
      object (ActionParameter)
    }
  ],
  "loadIndicator": enum (LoadIndicator),
  "persistValues": boolean,
  "interaction": enum (Interaction),
  "requiredWidgets": [
    string
  ],
  "allWidgetsAreRequired": boolean
}
Fields
function	
string

A custom function to invoke when the containing element is clicked or otherwise activated.

For example usage, see Read form data.

parameters[]	
object (ActionParameter)

List of action parameters.

loadIndicator	
enum (LoadIndicator)

Specifies the loading indicator that the action displays while making the call to the action.

persistValues	
boolean

Indicates whether form values persist after the action. The default value is false.

If true, form values remain after the action is triggered. To let the user make changes while the action is being processed, set LoadIndicator to NONE. For card messages in Chat apps, you must also set the action's ResponseType to UPDATE_MESSAGE and use the same cardId from the card that contained the action.

If false, the form values are cleared when the action is triggered. To prevent the user from making changes while the action is being processed, set LoadIndicator to SPINNER.

interaction	
enum (Interaction)

Optional. Required when opening a dialog.

What to do in response to an interaction with a user, such as a user clicking a button in a card message.

If unspecified, the app responds by executing an action —like opening a link or running a function—as normal.

By specifying an interaction, the app can respond in special interactive ways. For example, by setting interaction to OPEN_DIALOG, the app can open a dialog. When specified, a loading indicator isn't shown. If specified for an add-on, the entire card is stripped and nothing is shown in the client.

 Available for Google Chat apps and unavailable for Google Workspace add-ons.

requiredWidgets[]	
string

Optional. Fill this list with the names of widgets that this Action needs for a valid submission.

If the widgets listed here don't have a value when this Action is invoked, the form submission is aborted.

  Available for Google Chat apps and Google Workspace add-ons.

allWidgetsAreRequired	
boolean

Optional. If this is true, then all widgets are considered required by this action.

  Available for Google Chat apps and Google Workspace add-ons.

ActionParameter 
List of string parameters to supply when the action method is invoked. For example, consider three snooze buttons: snooze now, snooze one day, or snooze next week. You might use action method = snooze(), passing the snooze type and snooze time in the list of string parameters.

To learn more, see CommonEventObject.

  Available for Google Chat apps and Google Workspace add-ons.

JSON representation

{
  "key": string,
  "value": string
}
Fields
key	
string

The name of the parameter for the action script.

value	
string

The value of the parameter.

LoadIndicator 
Specifies the loading indicator that the action displays while making the call to the action.

  Available for Google Chat apps and Google Workspace add-ons.

Enums
SPINNER	Displays a spinner to indicate that content is loading.
NONE	Nothing is displayed.
Interaction 
Optional. Required when opening a dialog.

What to do in response to an interaction with a user, such as a user clicking a button in a card message.

If unspecified, the app responds by executing an action —like opening a link or running a function—as normal.

By specifying an interaction, the app can respond in special interactive ways. For example, by setting interaction to OPEN_DIALOG, the app can open a dialog.

When specified, a loading indicator isn't shown. If specified for an add-on, the entire card is stripped and nothing is shown in the client.

 Available for Google Chat apps and unavailable for Google Workspace add-ons.

Enums
INTERACTION_UNSPECIFIED	Default value. The action executes as normal.
OPEN_DIALOG	
Opens a dialog, a windowed, card-based interface that Chat apps use to interact with users.

Only supported by Chat apps in response to button-clicks on card messages. If specified for an add-on, the entire card is stripped and nothing is shown in the client.

 Available for Google Chat apps and unavailable for Google Workspace add-ons.

OpenLink 
Represents an onClick event that opens a hyperlink.

  Available for Google Chat apps and Google Workspace add-ons.

JSON representation

{
  "url": string,
  "openAs": enum (OpenAs),
  "onClose": enum (OnClose)
}
Fields
url	
string

The URL to open.

openAs	
enum (OpenAs)

How to open a link.

 Available for Google Workspace add-ons and unavailable for Google Chat apps.

onClose	
enum (OnClose)

Whether the client forgets about a link after opening it, or observes it until the window closes.

 Available for Google Workspace add-ons and unavailable for Google Chat apps.

OpenAs 
When an OnClick action opens a link, then the client can either open it as a full-size window (if that's the frame used by the client), or an overlay (such as a pop-up). The implementation depends on the client platform capabilities, and the value selected might be ignored if the client doesn't support it. FULL_SIZE is supported by all clients.

 Available for Google Workspace add-ons and unavailable for Google Chat apps.

Enums
FULL_SIZE	The link opens as a full-size window (if that's the frame used by the client).
OVERLAY	The link opens as an overlay, such as a pop-up.
OnClose 
What the client does when a link opened by an OnClick action is closed.

Implementation depends on client platform capabilities. For example, a web browser might open a link in a pop-up window with an OnClose handler.

If both OnOpen and OnClose handlers are set, and the client platform can't support both values, OnClose takes precedence.

 Available for Google Workspace add-ons and unavailable for Google Chat apps.

Enums
NOTHING	Default value. The card doesn't reload; nothing happens.
RELOAD	
Reloads the card after the child window closes.

If used in conjunction with OpenAs.OVERLAY, the child window acts as a modal dialog and the parent card is blocked until the child window closes.

OverflowMenu 
A widget that presents a pop-up menu with one or more actions that users can invoke. For example, showing non-primary actions in a card. You can use this widget when actions don't fit in the available space. To use, specify this widget in the OnClick action of widgets that support it. For example, in a Button.

  Available for Google Chat apps and Google Workspace add-ons.

JSON representation

{
  "items": [
    {
      object (OverflowMenuItem)
    }
  ]
}
Fields
items[]	
object (OverflowMenuItem)

Required. The list of menu options.

OverflowMenuItem 
An option that users can invoke in an overflow menu.

  Available for Google Chat apps and Google Workspace add-ons.

JSON representation

{
  "startIcon": {
    object (Icon)
  },
  "text": string,
  "onClick": {
    object (OnClick)
  },
  "disabled": boolean
}
Fields
startIcon	
object (Icon)

The icon displayed in front of the text.

text	
string

Required. The text that identifies or describes the item to users.

onClick	
object (OnClick)

Required. The action invoked when a menu option is selected. This OnClick cannot contain an OverflowMenu, any specified OverflowMenu is dropped and the menu item disabled.

disabled	
boolean

Whether the menu option is disabled. Defaults to false.

Icon 
An icon displayed in a widget on a card. For an example in Google Chat apps, see Add an icon.

Supports built-in and custom icons.

  Available for Google Chat apps and Google Workspace add-ons.

JSON representation

{
  "altText": string,
  "imageType": enum (ImageType),

  // Union field icons can be only one of the following:
  "knownIcon": string,
  "iconUrl": string,
  "materialIcon": {
    object (MaterialIcon)
  }
  // End of list of possible types for union field icons.
}
Fields
altText	
string

Optional. A description of the icon used for accessibility. If unspecified, the default value Button is provided. As a best practice, you should set a helpful description for what the icon displays, and if applicable, what it does. For example, A user's account portrait, or Opens a new browser tab and navigates to the Google Chat developer documentation at https://developers.google.com/workspace/chat.

If the icon is set in a Button, the altText appears as helper text when the user hovers over the button. However, if the button also sets text, the icon's altText is ignored.

imageType	
enum (ImageType)

The crop style applied to the image. In some cases, applying a CIRCLE crop causes the image to be drawn larger than a built-in icon.

Union field icons. The icon displayed in the widget on the card. icons can be only one of the following:
knownIcon	
string

Display one of the built-in icons provided by Google Workspace.

For example, to display an airplane icon, specify AIRPLANE. For a bus, specify BUS.

For a full list of supported icons, see built-in icons.

iconUrl	
string

Display a custom icon hosted at an HTTPS URL.

For example:


"iconUrl":
"https://developers.google.com/workspace/chat/images/quickstart-app-avatar.png"
Supported file types include .png and .jpg.

materialIcon	
object (MaterialIcon)

Display one of the Google Material Icons.

For example, to display a checkbox icon, use


"materialIcon": {
  "name": "check_box"
}
 Available for Google Chat apps and unavailable for Google Workspace add-ons.

MaterialIcon 
A Google Material Icon, which includes over 2500+ options.

For example, to display a checkbox icon with customized weight and grade, write the following:


{
  "name": "check_box",
  "fill": true,
  "weight": 300,
  "grade": -25
}
 Available for Google Chat apps and unavailable for Google Workspace add-ons.

JSON representation

{
  "name": string,
  "fill": boolean,
  "weight": integer,
  "grade": integer
}
Fields
name	
string

The icon name defined in the Google Material Icon, for example, check_box. Any invalid names are abandoned and replaced with empty string and results in the icon failing to render.

fill	
boolean

Whether the icon renders as filled. Default value is false.

To preview different icon settings, go to Google Font Icons and adjust the settings under Customize.

weight	
integer

The stroke weight of the icon. Choose from {100, 200, 300, 400, 500, 600, 700}. If absent, default value is 400. If any other value is specified, the default value is used.

To preview different icon settings, go to Google Font Icons and adjust the settings under Customize.

grade	
integer

Weight and grade affect a symbol’s thickness. Adjustments to grade are more granular than adjustments to weight and have a small impact on the size of the symbol. Choose from {-25, 0, 200}. If absent, default value is 0. If any other value is specified, the default value is used.

To preview different icon settings, go to Google Font Icons and adjust the settings under Customize.

DecoratedText 
A widget that displays text with optional decorations such as a label above or below the text, an icon in front of the text, a selection widget, or a button after the text. For an example in Google Chat apps, see Display text with decorative text.

  Available for Google Chat apps and Google Workspace add-ons.

JSON representation

{
  "icon": {
    object (Icon)
  },
  "startIcon": {
    object (Icon)
  },
  "startIconVerticalAlignment": enum (VerticalAlignment),
  "topLabel": string,
  "topLabelText": {
    object (TextParagraph)
  },
  "text": string,
  "contentText": {
    object (TextParagraph)
  },
  "wrapText": boolean,
  "bottomLabel": string,
  "bottomLabelText": {
    object (TextParagraph)
  },
  "onClick": {
    object (OnClick)
  },

  // Union field control can be only one of the following:
  "button": {
    object (Button)
  },
  "switchControl": {
    object (SwitchControl)
  },
  "endIcon": {
    object (Icon)
  }
  // End of list of possible types for union field control.
}
Fields
icon
(deprecated)	
object (Icon)

This item is deprecated!

Deprecated in favor of startIcon.

startIcon	
object (Icon)

The icon displayed in front of the text.

startIconVerticalAlignment	
enum (VerticalAlignment)

Optional. Vertical alignment of the start icon. If not set, the icon will be vertically centered.

Developer Preview: Available as part of the Google Workspace Developer Preview Program, which grants early access to certain features.

 Available for Google Chat apps and unavailable for Google Workspace add-ons.

topLabel	
string

The text that appears above text. Always truncates.

topLabelText	
object (TextParagraph)

TextParagraph equivalent of topLabel. Always truncates. Allows for more complex formatting than topLabel.

Developer Preview: Available as part of the Google Workspace Developer Preview Program, which grants early access to certain features.

 Available for Google Chat apps and unavailable for Google Workspace add-ons.

text	
string

Required. The primary text.

Supports simple formatting. For more information about formatting text, see Formatting text in Google Chat apps and Formatting text in Google Workspace add-ons.

contentText	
object (TextParagraph)

TextParagraph equivalent of text. Allows for more complex formatting than text.

Developer Preview: Available as part of the Google Workspace Developer Preview Program, which grants early access to certain features.

 Available for Google Chat apps and unavailable for Google Workspace add-ons.

wrapText	
boolean

The wrap text setting. If true, the text wraps and displays on multiple lines. Otherwise, the text is truncated.

Only applies to text, not topLabel and bottomLabel.

bottomLabel	
string

The text that appears below text. Always wraps.

bottomLabelText	
object (TextParagraph)

TextParagraph equivalent of bottomLabel. Always wraps. Allows for more complex formatting than bottomLabel.

Developer Preview: Available as part of the Google Workspace Developer Preview Program, which grants early access to certain features.

 Available for Google Chat apps and unavailable for Google Workspace add-ons.

onClick	
object (OnClick)

This action is triggered when users click topLabel or bottomLabel.

Union field control. A button, switch, checkbox, or image that appears to the right-hand side of text in the decoratedText widget. control can be only one of the following:
button	
object (Button)

A button that a user can click to trigger an action.

switchControl	
object (SwitchControl)

A switch widget that a user can click to change its state and trigger an action.

endIcon	
object (Icon)

An icon displayed after the text.

Supports built-in and custom icons.

VerticalAlignment 
Represents vertical alignment attribute.

Enums
VERTICAL_ALIGNMENT_UNSPECIFIED	Unspecified type. Do not use.
TOP	Alignment to the top position.
MIDDLE	Alignment to the middle position.
BOTTOM	Alignment to the bottom position.
Button 
A text, icon, or text and icon button that users can click. For an example in Google Chat apps, see Add a button.

To make an image a clickable button, specify an Image (not an ImageComponent) and set an onClick action.

  Available for Google Chat apps and Google Workspace add-ons.

JSON representation

{
  "text": string,
  "icon": {
    object (Icon)
  },
  "color": {
    object (Color)
  },
  "onClick": {
    object (OnClick)
  },
  "disabled": boolean,
  "altText": string,
  "type": enum (Type)
}
Fields
text	
string

The text displayed inside the button.

icon	
object (Icon)

An icon displayed inside the button. If both icon and text are set, then the icon appears before the text.

color	
object (Color)

Optional. The color of the button. If set, the button type is set to FILLED and the color of text and icon fields are set to a contrasting color for readability. For example, if the button color is set to blue, any text or icons in the button are set to white.

To set the button color, specify a value for the red, green, and blue fields. The value must be a float number between 0 and 1 based on the RGB color value, where 0 (0/255) represents the absence of color and 1 (255/255) represents the maximum intensity of the color.

For example, the following sets the color to red at its maximum intensity:


"color": {
   "red": 1,
   "green": 0,
   "blue": 0,
}
The alpha field is unavailable for button color. If specified, this field is ignored.

onClick	
object (OnClick)

Required. The action to perform when a user clicks the button, such as opening a hyperlink or running a custom function.

disabled	
boolean

If true, the button is displayed in an inactive state and doesn't respond to user actions.

altText	
string

The alternative text that's used for accessibility.

Set descriptive text that lets users know what the button does. For example, if a button opens a hyperlink, you might write: "Opens a new browser tab and navigates to the Google Chat developer documentation at https://developers.google.com/workspace/chat".

type	
enum (Type)

Optional. The type of a button. If unset, button type defaults to OUTLINED. If the color field is set, the button type is forced to FILLED and any value set for this field is ignored.

Color 
Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of java.awt.Color in Java; it can also be trivially provided to UIColor's +colorWithRed:green:blue:alpha method in iOS; and, with just a little work, it can be easily formatted into a CSS rgba() string in JavaScript.

This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space.

When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most 1e-5.

Example (Java):


 import com.google.type.Color;

 // ...
 public static java.awt.Color fromProto(Color protocolor) {
   float alpha = protocolor.hasAlpha()
       ? protocolor.getAlpha().getValue()
       : 1.0;

   return new java.awt.Color(
       protocolor.getRed(),
       protocolor.getGreen(),
       protocolor.getBlue(),
       alpha);
 }

 public static Color toProto(java.awt.Color color) {
   float red = (float) color.getRed();
   float green = (float) color.getGreen();
   float blue = (float) color.getBlue();
   float denominator = 255.0;
   Color.Builder resultBuilder =
       Color
           .newBuilder()
           .setRed(red / denominator)
           .setGreen(green / denominator)
           .setBlue(blue / denominator);
   int alpha = color.getAlpha();
   if (alpha != 255) {
     result.setAlpha(
         FloatValue
             .newBuilder()
             .setValue(((float) alpha) / denominator)
             .build());
   }
   return resultBuilder.build();
 }
 // ...
Example (iOS / Obj-C):


 // ...
 static UIColor* fromProto(Color* protocolor) {
    float red = [protocolor red];
    float green = [protocolor green];
    float blue = [protocolor blue];
    FloatValue* alpha_wrapper = [protocolor alpha];
    float alpha = 1.0;
    if (alpha_wrapper != nil) {
      alpha = [alpha_wrapper value];
    }
    return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];
 }

 static Color* toProto(UIColor* color) {
     CGFloat red, green, blue, alpha;
     if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {
       return nil;
     }
     Color* result = [[Color alloc] init];
     [result setRed:red];
     [result setGreen:green];
     [result setBlue:blue];
     if (alpha <= 0.9999) {
       [result setAlpha:floatWrapperWithValue(alpha)];
     }
     [result autorelease];
     return result;
}
// ...
Example (JavaScript):


// ...

var protoToCssColor = function(rgb_color) {
   var redFrac = rgb_color.red || 0.0;
   var greenFrac = rgb_color.green || 0.0;
   var blueFrac = rgb_color.blue || 0.0;
   var red = Math.floor(redFrac * 255);
   var green = Math.floor(greenFrac * 255);
   var blue = Math.floor(blueFrac * 255);

   if (!('alpha' in rgb_color)) {
      return rgbToCssColor(red, green, blue);
   }

   var alphaFrac = rgb_color.alpha.value || 0.0;
   var rgbParams = [red, green, blue].join(',');
   return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');
};

var rgbToCssColor = function(red, green, blue) {
  var rgbNumber = new Number((red << 16) | (green << 8) | blue);
  var hexString = rgbNumber.toString(16);
  var missingZeros = 6 - hexString.length;
  var resultBuilder = ['#'];
  for (var i = 0; i < missingZeros; i++) {
     resultBuilder.push('0');
  }
  resultBuilder.push(hexString);
  return resultBuilder.join('');
};

// ...
JSON representation

{
  "red": number,
  "green": number,
  "blue": number,
  "alpha": number
}
Fields
red	
number

The amount of red in the color as a value in the interval [0, 1].

green	
number

The amount of green in the color as a value in the interval [0, 1].

blue	
number

The amount of blue in the color as a value in the interval [0, 1].

alpha	
number

The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation:

pixel color = alpha * (this color) + (1.0 - alpha) * (background color)

This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).

Type 
Optional. The type of a button. If color field is set, the type is forced to FILLED.

 Available for Google Chat apps and unavailable for Google Workspace add-ons.

Enums
TYPE_UNSPECIFIED	Don't use. Unspecified.
OUTLINED	Outlined buttons are medium-emphasis buttons. They usually contain actions that are important, but aren’t the primary action in a Chat app or an add-on.
FILLED	A filled button has a container with a solid color. It has the most visual impact and is recommended for the important and primary action in a Chat app or an add-on.
FILLED_TONAL	A filled tonal button is an alternative middle ground between filled and outlined buttons. They’re useful in contexts where a lower-priority button requires slightly more emphasis than an outline button would give.
BORDERLESS	A button does not have an invisible container in its default state. It is often used for the lowest priority actions, especially when presenting multiple options.
SwitchControl 
Either a toggle-style switch or a checkbox inside a decoratedText widget.

  Available for Google Chat apps and Google Workspace add-ons.

Only supported in the decoratedText widget.

JSON representation

{
  "name": string,
  "value": string,
  "selected": boolean,
  "onChangeAction": {
    object (Action)
  },
  "controlType": enum (ControlType)
}
Fields
name	
string

The name by which the switch widget is identified in a form input event.

For details about working with form inputs, see Receive form data.

value	
string

The value entered by a user, returned as part of a form input event.

For details about working with form inputs, see Receive form data.

selected	
boolean

When true, the switch is selected.

onChangeAction	
object (Action)

The action to perform when the switch state is changed, such as what function to run.

controlType	
enum (ControlType)

How the switch appears in the user interface.

  Available for Google Chat apps and Google Workspace add-ons.

ControlType 
How the switch appears in the user interface.

  Available for Google Chat apps and Google Workspace add-ons.

Enums
SWITCH	A toggle-style switch.
CHECKBOX	Deprecated in favor of CHECK_BOX.
CHECK_BOX	A checkbox.
ButtonList 
A list of buttons layed out horizontally. For an example in Google Chat apps, see Add a button.

  Available for Google Chat apps and Google Workspace add-ons.

JSON representation

{
  "buttons": [
    {
      object (Button)
    }
  ]
}
Fields
buttons[]	
object (Button)

An array of buttons.

TextInput 
A field in which users can enter text. Supports suggestions and on-change actions. Supports form submission validation. When Action.all_widgets_are_required is set to true or this widget is specified in Action.required_widgets, the submission action is blocked unless a value is entered. For an example in Google Chat apps, see Add a field in which a user can enter text.

Chat apps receive and can process the value of entered text during form input events. For details about working with form inputs, see Receive form data.

When you need to collect undefined or abstract data from users, use a text input. To collect defined or enumerated data from users, use the SelectionInput widget.

  Available for Google Chat apps and Google Workspace add-ons.

JSON representation

{
  "name": string,
  "label": string,
  "hintText": string,
  "value": string,
  "type": enum (Type),
  "onChangeAction": {
    object (Action)
  },
  "initialSuggestions": {
    object (Suggestions)
  },
  "autoCompleteAction": {
    object (Action)
  },
  "validation": {
    object (Validation)
  },
  "placeholderText": string
}
Fields
name	
string

The name by which the text input is identified in a form input event.

For details about working with form inputs, see Receive form data.

label	
string

The text that appears above the text input field in the user interface.

Specify text that helps the user enter the information your app needs. For example, if you are asking someone's name, but specifically need their surname, write surname instead of name.

Required if hintText is unspecified. Otherwise, optional.

hintText	
string

Text that appears below the text input field meant to assist users by prompting them to enter a certain value. This text is always visible.

Required if label is unspecified. Otherwise, optional.

value	
string

The value entered by a user, returned as part of a form input event.

For details about working with form inputs, see Receive form data.

type	
enum (Type)

How a text input field appears in the user interface. For example, whether the field is single or multi-line.

onChangeAction	
object (Action)

What to do when a change occurs in the text input field. For example, a user adding to the field or deleting text.

Examples of actions to take include running a custom function or opening a dialog in Google Chat.

initialSuggestions	
object (Suggestions)

Suggested values that users can enter. These values appear when users click inside the text input field. As users type, the suggested values dynamically filter to match what the users have typed.

For example, a text input field for programming language might suggest Java, JavaScript, Python, and C++. When users start typing Jav, the list of suggestions filters to show just Java and JavaScript.

Suggested values help guide users to enter values that your app can make sense of. When referring to JavaScript, some users might enter javascript and others java script. Suggesting JavaScript can standardize how users interact with your app.

When specified, TextInput.type is always SINGLE_LINE, even if it's set to MULTIPLE_LINE.

  Available for Google Chat apps and Google Workspace add-ons.

autoCompleteAction	
object (Action)

Optional. Specify what action to take when the text input field provides suggestions to users who interact with it.

If unspecified, the suggestions are set by initialSuggestions and are processed by the client.

If specified, the app takes the action specified here, such as running a custom function.

 Available for Google Workspace add-ons and unavailable for Google Chat apps.

validation	
object (Validation)

Specify the input format validation necessary for this text field.

  Available for Google Chat apps and Google Workspace add-ons.

placeholderText	
string

Text that appears in the text input field when the field is empty. Use this text to prompt users to enter a value. For example, Enter a number from 0 to 100.

 Available for Google Chat apps and unavailable for Google Workspace add-ons.

Type 
How a text input field appears in the user interface. For example, whether it's a single line input field, or a multi-line input. If initialSuggestions is specified, type is always SINGLE_LINE, even if it's set to MULTIPLE_LINE.

  Available for Google Chat apps and Google Workspace add-ons.

Enums
SINGLE_LINE	The text input field has a fixed height of one line.
MULTIPLE_LINE	The text input field has a fixed height of multiple lines.
RenderActions
A set of render instructions that tells a card to perform an action, or tells the add-on host app or the Chat app to perform an app-specific action.

  Available for Google Chat apps and Google Workspace add-ons.

Fields
action	
Action

Action
Fields
navigations[]	
Navigation

Pushes, pops, or updates a card.

Add-ons in Google Chat.

Navigation
Add a new card to the stack (navigate forward). For Chat apps, only available for app home.

  Available for Google Chat apps and Google Workspace add-ons.


navigations: {
  pushCard: CARD
}
Replace the top card with a new card. For Chat apps, only available for app home.

  Available for Google Chat apps and Google Workspace add-ons.


navigations: {
  updateCard: CARD
}
Fields
Union field navigate_action.

navigate_action can be only one of the following:

pushCard	
Card

Pushes a card onto the card stack.

For dialogs in Google Chat, opens or updates a dialog.

updateCard	
Card

Updates the top card with a new card and preserves filled form fields values. For a non-equivalent field, the value is dropped.

For dialogs in Google Chat, opens or updates a dialog.

Suggestions 
Suggested values that users can enter. These values appear when users click inside the text input field. As users type, the suggested values dynamically filter to match what the users have typed.

For example, a text input field for programming language might suggest Java, JavaScript, Python, and C++. When users start typing Jav, the list of suggestions filters to show Java and JavaScript.

Suggested values help guide users to enter values that your app can make sense of. When referring to JavaScript, some users might enter javascript and others java script. Suggesting JavaScript can standardize how users interact with your app.

When specified, TextInput.type is always SINGLE_LINE, even if it's set to MULTIPLE_LINE.

  Available for Google Chat apps and Google Workspace add-ons.

JSON representation

{
  "items": [
    {
      object (SuggestionItem)
    }
  ]
}
Fields
items[]	
object (SuggestionItem)

A list of suggestions used for autocomplete recommendations in text input fields.

SuggestionItem 
One suggested value that users can enter in a text input field.

  Available for Google Chat apps and Google Workspace add-ons.

JSON representation

{

  // Union field content can be only one of the following:
  "text": string
  // End of list of possible types for union field content.
}
Fields
Union field content.

content can be only one of the following:

text	
string

The value of a suggested input to a text input field. This is equivalent to what users enter themselves.

Validation 
Represents the necessary data for validating the widget it's attached to.

  Available for Google Chat apps and Google Workspace add-ons.

JSON representation

{
  "characterLimit": integer,
  "inputType": enum (InputType)
}
Fields
characterLimit	
integer

Specify the character limit for text input widgets. Note that this is only used for text input and is ignored for other widgets.

  Available for Google Chat apps and Google Workspace add-ons.

inputType	
enum (InputType)

Specify the type of the input widgets.

  Available for Google Chat apps and Google Workspace add-ons.

InputType 
The type of the input widget.

Enums
INPUT_TYPE_UNSPECIFIED	Unspecified type. Do not use.
TEXT	Regular text that accepts all characters.
INTEGER	An integer value.
FLOAT	A float value.
EMAIL	An email address.
EMOJI_PICKER	A emoji selected from system-provided emoji picker.
SelectionInput 
A widget that creates one or more UI items that users can select. Supports form submission validation for dropdown and multiselect menus only. When Action.all_widgets_are_required is set to true or this widget is specified in Action.required_widgets, the submission action is blocked unless a value is selected. For example, a dropdown menu or checkboxes. You can use this widget to collect data that can be predicted or enumerated. For an example in Google Chat apps, see Add selectable UI elements.

Chat apps can process the value of items that users select or input. For details about working with form inputs, see Receive form data.

To collect undefined or abstract data from users, use the TextInput widget.

  Available for Google Chat apps and Google Workspace add-ons.

JSON representation

{
  "name": string,
  "label": string,
  "type": enum (SelectionType),
  "items": [
    {
      object (SelectionItem)
    }
  ],
  "onChangeAction": {
    object (Action)
  },
  "multiSelectMaxSelectedItems": integer,
  "multiSelectMinQueryLength": integer,

  // Union field multi_select_data_source can be only one of the following:
  "externalDataSource": {
    object (Action)
  },
  "platformDataSource": {
    object (PlatformDataSource)
  }
  // End of list of possible types for union field multi_select_data_source.
}
Fields
name	
string

Required. The name that identifies the selection input in a form input event.

For details about working with form inputs, see Receive form data.

label	
string

The text that appears above the selection input field in the user interface.

Specify text that helps the user enter the information your app needs. For example, if users are selecting the urgency of a work ticket from a drop-down menu, the label might be "Urgency" or "Select urgency".

type	
enum (SelectionType)

The type of items that are displayed to users in a SelectionInput widget. Selection types support different types of interactions. For example, users can select one or more checkboxes, but they can only select one value from a dropdown menu.

items[]	
object (SelectionItem)

An array of selectable items. For example, an array of radio buttons or checkboxes. Supports up to 100 items.

onChangeAction	
object (Action)

If specified, the form is submitted when the selection changes. If not specified, you must specify a separate button that submits the form.

For details about working with form inputs, see Receive form data.

multiSelectMaxSelectedItems	
integer

For multiselect menus, the maximum number of items that a user can select. Minimum value is 1 item. If unspecified, defaults to 3 items.

multiSelectMinQueryLength	
integer

For multiselect menus, the number of text characters that a user inputs before the menu returns suggested selection items.

If unset, the multiselect menu uses the following default values:

If the menu uses a static array of SelectionInput items, defaults to 0 characters and immediately populates items from the array.
If the menu uses a dynamic data source ( multi_select_data_source), defaults to 3 characters before querying the data source to return suggested items.
Union field multi_select_data_source. For a multiselect menu, a data source that dynamically populates selection items.

 Available for Google Chat apps and unavailable for Google Workspace add-ons. multi_select_data_source can be only one of the following:

externalDataSource	
object (Action)

An external data source, such as a relational database.

platformDataSource	
object (PlatformDataSource)

A data source from Google Workspace.

SelectionType 
The format for the items that users can select. Different options support different types of interactions. For example, users can select multiple checkboxes, but can only select one item from a dropdown menu.

Each selection input supports one type of selection. Mixing checkboxes and switches, for example, isn't supported.

  Available for Google Chat apps and Google Workspace add-ons.

Enums
CHECK_BOX	A set of checkboxes. Users can select one or more checkboxes.
RADIO_BUTTON	A set of radio buttons. Users can select one radio button.
SWITCH	A set of switches. Users can turn on one or more switches.
DROPDOWN	A dropdown menu. Users can select one item from the menu.
MULTI_SELECT	
A menu with a text box. Users can type and select one or more items. For Google Workspace add-ons, you must populate items using a static array of SelectionItem objects.

For Google Chat apps, you can also populate items using a dynamic data source and autosuggest items as users type in the menu. For example, users can start typing the name of a Google Chat space and the widget autosuggests the space. To dynamically populate items for a multiselect menu, use one of the following types of data sources:

Google Workspace data: Items are populated using data from Google Workspace, such as Google Workspace users or Google Chat spaces.
External data: Items are populated from an external data source outside of Google Workspace.
For examples of how to implement multiselect menus for Chat apps, see Add a multiselect menu.

  Available for Google Chat apps and Google Workspace add-ons.

SelectionItem 
An item that users can select in a selection input, such as a checkbox or switch. Supports up to 100 items.

  Available for Google Chat apps and Google Workspace add-ons.

JSON representation

{
  "text": string,
  "value": string,
  "selected": boolean,
  "bottomText": string,

  // Union field start_icon can be only one of the following:
  "startIconUri": string
  // End of list of possible types for union field start_icon.
}
Fields
text	
string

The text that identifies or describes the item to users.

value	
string

The value associated with this item. The client should use this as a form input value.

For details about working with form inputs, see Receive form data.

selected	
boolean

Whether the item is selected by default. If the selection input only accepts one value (such as for radio buttons or a dropdown menu), only set this field for one item.

bottomText	
string

For multiselect menus, a text description or label that's displayed below the item's text field.

Union field start_icon. For multiselect menus, the URL for the icon displayed next to the item's text field. Supports PNG and JPEG files. Must be an HTTPS URL. For example, https://developers.google.com/workspace/chat/images/quickstart-app-avatar.png. start_icon can be only one of the following:
startIconUri	
string

PlatformDataSource 
For a SelectionInput widget that uses a multiselect menu, a data source from Google Workspace. Used to populate items in a multiselect menu.

 Available for Google Chat apps and unavailable for Google Workspace add-ons.

JSON representation

{

  // Union field data_source can be only one of the following:
  "commonDataSource": enum (CommonDataSource),
  "hostAppDataSource": {
    object (HostAppDataSourceMarkup)
  }
  // End of list of possible types for union field data_source.
}
Fields
Union field data_source. The data source. data_source can be only one of the following:
commonDataSource	
enum (CommonDataSource)

A data source shared by all Google Workspace applications, such as users in a Google Workspace organization.

hostAppDataSource	
object (HostAppDataSourceMarkup)

A data source that's unique to a Google Workspace host application, such spaces in Google Chat.

This field supports the Google API Client Libraries but isn't available in the Cloud Client Libraries. To learn more, see Install the client libraries.

CommonDataSource 
A data source shared by all Google Workspace applications.

 Available for Google Chat apps and unavailable for Google Workspace add-ons.

Enums
UNKNOWN	Default value. Don't use.
USER	Google Workspace users. The user can only view and select users from their Google Workspace organization.
HostAppDataSourceMarkup 
For a SelectionInput widget that uses a multiselect menu, a data source from a Google Workspace application. The data source populates selection items for the multiselect menu.

 Available for Google Chat apps and unavailable for Google Workspace add-ons.

JSON representation

{

  // Union field data_source can be only one of the following:
  "chatDataSource": {
    object (ChatClientDataSourceMarkup)
  }
  // End of list of possible types for union field data_source.
}
Fields
Union field data_source. The Google Workspace application that populates items for a multiselect menu. data_source can be only one of the following:
chatDataSource	
object (ChatClientDataSourceMarkup)

A data source from Google Chat.

ChatClientDataSourceMarkup
For a SelectionInput widget that uses a multiselect menu, a data source from Google Chat. The data source populates selection items for the multiselect menu. For example, a user can select Google Chat spaces that they're a member of.

 Available for Google Chat apps and unavailable for Google Workspace add-ons.

JSON representation

{

  // Union field source can be only one of the following:
  "spaceDataSource": {
    object (SpaceDataSource)
  }
  // End of list of possible types for union field source.
}
Fields
Union field source. The Google Chat data source. source can be only one of the following:
spaceDataSource	
object (SpaceDataSource)

Google Chat spaces that the user is a member of.

SpaceDataSource 
A data source that populates Google Chat spaces as selection items for a multiselect menu. Only populates spaces that the user is a member of.

 Available for Google Chat apps and unavailable for Google Workspace add-ons.

JSON representation

{
  "defaultToCurrentSpace": boolean
}
Fields
defaultToCurrentSpace	
boolean

If set to true, the multiselect menu selects the current Google Chat space as an item by default.

DateTimePicker 
Lets users input a date, a time, or both a date and a time. Supports form submission validation. When Action.all_widgets_are_required is set to true or this widget is specified in Action.required_widgets, the submission action is blocked unless a value is selected. For an example in Google Chat apps, see Let a user pick a date and time.

Users can input text or use the picker to select dates and times. If users input an invalid date or time, the picker shows an error that prompts users to input the information correctly.

  Available for Google Chat apps and Google Workspace add-ons.

JSON representation

{
  "name": string,
  "label": string,
  "type": enum (DateTimePickerType),
  "valueMsEpoch": int64,
  "timezoneOffsetDate": integer,
  "onChangeAction": {
    object (Action)
  }
}
Fields
name	
string

The name by which the DateTimePicker is identified in a form input event.

For details about working with form inputs, see Receive form data.

label	
string

The text that prompts users to input a date, a time, or a date and time. For example, if users are scheduling an appointment, use a label such as Appointment date or Appointment date and time.

type	
enum (DateTimePickerType)

Whether the widget supports inputting a date, a time, or the date and time.

valueMsEpoch	
int64

The default value displayed in the widget, in milliseconds since Unix epoch time.

Specify the value based on the type of picker ( DateTimePickerType):

DATE_AND_TIME : a calendar date and time in UTC. For example, to represent January 1, 2023 at 12:00 PM UTC, use 1672574400000.
DATE_ONLY : a calendar date at 00:00:00 UTC. For example, to represent January 1, 2023, use 1672531200000.
TIME_ONLY : a time in UTC. For example, to represent 12:00 PM, use 43200000 (or 12 * 60 * 60 * 1000).
timezoneOffsetDate	
integer

The number representing the time zone offset from UTC, in minutes. If set, the valueMsEpoch is displayed in the specified time zone. If unset, the value defaults to the user's time zone setting.

onChangeAction	
object (Action)

Triggered when the user clicks Save or Clear from the DateTimePicker interface.

DateTimePickerType 
The format for the date and time in the DateTimePicker widget. Determines whether users can input a date, a time, or both a date and time.

  Available for Google Chat apps and Google Workspace add-ons.

Enums
DATE_AND_TIME	Users input a date and time.
DATE_ONLY	Users input a date.
TIME_ONLY	Users input a time.
Divider 
This type has no fields.

Displays a divider between widgets as a horizontal line. For an example in Google Chat apps, see Add a horizontal divider between widgets.

  Available for Google Chat apps and Google Workspace add-ons.

For example, the following JSON creates a divider:


"divider": {}
Grid 
Displays a grid with a collection of items. Items can only include text or images. For responsive columns, or to include more than text or images, use Columns. For an example in Google Chat apps, see Display a Grid with a collection of items.

A grid supports any number of columns and items. The number of rows is determined by items divided by columns. A grid with 10 items and 2 columns has 5 rows. A grid with 11 items and 2 columns has 6 rows.

  Available for Google Chat apps and Google Workspace add-ons.

For example, the following JSON creates a 2 column grid with a single item:


"grid": {
  "title": "A fine collection of items",
  "columnCount": 2,
  "borderStyle": {
    "type": "STROKE",
    "cornerRadius": 4
  },
  "items": [
    {
      "image": {
        "imageUri": "https://www.example.com/image.png",
        "cropStyle": {
          "type": "SQUARE"
        },
        "borderStyle": {
          "type": "STROKE"
        }
      },
      "title": "An item",
      "textAlignment": "CENTER"
    }
  ],
  "onClick": {
    "openLink": {
      "url": "https://www.example.com"
    }
  }
}
JSON representation

{
  "title": string,
  "items": [
    {
      object (GridItem)
    }
  ],
  "borderStyle": {
    object (BorderStyle)
  },
  "columnCount": integer,
  "onClick": {
    object (OnClick)
  }
}
Fields
title	
string

The text that displays in the grid header.

items[]	
object (GridItem)

The items to display in the grid.

borderStyle	
object (BorderStyle)

The border style to apply to each grid item.

columnCount	
integer

The number of columns to display in the grid. A default value is used if this field isn't specified, and that default value is different depending on where the grid is shown (dialog versus companion).

onClick	
object (OnClick)

This callback is reused by each individual grid item, but with the item's identifier and index in the items list added to the callback's parameters.

GridItem 
Represents an item in a grid layout. Items can contain text, an image, or both text and an image.

  Available for Google Chat apps and Google Workspace add-ons.

JSON representation

{
  "id": string,
  "image": {
    object (ImageComponent)
  },
  "title": string,
  "subtitle": string,
  "layout": enum (GridItemLayout)
}
Fields
id	
string

A user-specified identifier for this grid item. This identifier is returned in the parent grid's onClick callback parameters.

image	
object (ImageComponent)

The image that displays in the grid item.

title	
string

The grid item's title.

subtitle	
string

The grid item's subtitle.

layout	
enum (GridItemLayout)

The layout to use for the grid item.

ImageComponent 
Represents an image.

  Available for Google Chat apps and Google Workspace add-ons.

JSON representation

{
  "imageUri": string,
  "altText": string,
  "cropStyle": {
    object (ImageCropStyle)
  },
  "borderStyle": {
    object (BorderStyle)
  }
}
Fields
imageUri	
string

The image URL.

altText	
string

The accessibility label for the image.

cropStyle	
object (ImageCropStyle)

The crop style to apply to the image.

borderStyle	
object (BorderStyle)

The border style to apply to the image.

ImageCropStyle
Represents the crop style applied to an image.

  Available for Google Chat apps and Google Workspace add-ons.

For example, here's how to apply a 16:9 aspect ratio:


cropStyle {
 "type": "RECTANGLE_CUSTOM",
 "aspectRatio": 16/9
}
JSON representation

{
  "type": enum (ImageCropType),
  "aspectRatio": number
}
Fields
type	
enum (ImageCropType)

The crop type.

aspectRatio	
number

The aspect ratio to use if the crop type is RECTANGLE_CUSTOM.

For example, here's how to apply a 16:9 aspect ratio:


cropStyle {
 "type": "RECTANGLE_CUSTOM",
 "aspectRatio": 16/9
}
ImageCropType 
Represents the crop style applied to an image.

  Available for Google Chat apps and Google Workspace add-ons.

Enums
IMAGE_CROP_TYPE_UNSPECIFIED	Don't use. Unspecified.
SQUARE	Default value. Applies a square crop.
CIRCLE	Applies a circular crop.
RECTANGLE_CUSTOM	Applies a rectangular crop with a custom aspect ratio. Set the custom aspect ratio with aspectRatio.
RECTANGLE_4_3	Applies a rectangular crop with a 4:3 aspect ratio.
BorderStyle 
The style options for the border of a card or widget, including the border type and color.

  Available for Google Chat apps and Google Workspace add-ons.

JSON representation

{
  "type": enum (BorderType),
  "strokeColor": {
    object (Color)
  },
  "cornerRadius": integer
}
Fields
type	
enum (BorderType)

The border type.

strokeColor	
object (Color)

The colors to use when the type is BORDER_TYPE_STROKE.

To set the stroke color, specify a value for the red, green, and blue fields. The value must be a float number between 0 and 1 based on the RGB color value, where 0 (0/255) represents the absence of color and 1 (255/255) represents the maximum intensity of the color.

For example, the following sets the color to red at its maximum intensity:


"color": {
   "red": 1,
   "green": 0,
   "blue": 0,
}
The alpha field is unavailable for stroke color. If specified, this field is ignored.

cornerRadius	
integer

The corner radius for the border.

BorderType 
Represents the border types applied to widgets.

  Available for Google Chat apps and Google Workspace add-ons.

Enums
BORDER_TYPE_UNSPECIFIED	Don't use. Unspecified.
NO_BORDER	No border.
STROKE	Default value. Outline.
GridItemLayout 
Represents the various layout options available for a grid item.

  Available for Google Chat apps and Google Workspace add-ons.

Enums
GRID_ITEM_LAYOUT_UNSPECIFIED	Don't use. Unspecified.
TEXT_BELOW	The title and subtitle are shown below the grid item's image.
TEXT_ABOVE	The title and subtitle are shown above the grid item's image.
Columns 
The Columns widget displays up to 2 columns in a card or dialog. You can add widgets to each column; the widgets appear in the order that they are specified. For an example in Google Chat apps, see Display cards and dialogs in columns.

The height of each column is determined by the taller column. For example, if the first column is taller than the second column, both columns have the height of the first column. Because each column can contain a different number of widgets, you can't define rows or align widgets between the columns.

Columns are displayed side-by-side. You can customize the width of each column using the HorizontalSizeStyle field. If the user's screen width is too narrow, the second column wraps below the first:

On web, the second column wraps if the screen width is less than or equal to 480 pixels.
On iOS devices, the second column wraps if the screen width is less than or equal to 300 pt.
On Android devices, the second column wraps if the screen width is less than or equal to 320 dp.
To include more than two columns, or to use rows, use the Grid widget.

  Available for Google Chat apps and Google Workspace add-ons. The add-on UIs that support columns include:

The dialog displayed when users open the add-on from an email draft.
The dialog displayed when users open the add-on from the Add attachment menu in a Google Calendar event.
JSON representation

{
  "columnItems": [
    {
      object (Column)
    }
  ]
}
Fields
columnItems[]	
object (Column)

An array of columns. You can include up to 2 columns in a card or dialog.

Column
A column.

Google Workspace add-ons and Chat apps

JSON representation

{
  "horizontalSizeStyle": enum (HorizontalSizeStyle),
  "horizontalAlignment": enum (HorizontalAlignment),
  "verticalAlignment": enum (VerticalAlignment),
  "widgets": [
    {
      object (Widgets)
    }
  ]
}
Fields
horizontalSizeStyle	
enum (HorizontalSizeStyle)

Specifies how a column fills the width of the card.

horizontalAlignment	
enum (HorizontalAlignment)

Specifies whether widgets align to the left, right, or center of a column.

verticalAlignment	
enum (VerticalAlignment)

Specifies whether widgets align to the top, bottom, or center of a column.

widgets[]	
object (Widgets)

An array of widgets included in a column. Widgets appear in the order that they are specified.

HorizontalSizeStyle 
Specifies how a column fills the width of the card. The width of each column depends on both the HorizontalSizeStyle and the width of the widgets within the column.

Google Workspace add-ons and Chat apps

Enums
HORIZONTAL_SIZE_STYLE_UNSPECIFIED	Don't use. Unspecified.
FILL_AVAILABLE_SPACE	Default value. Column fills the available space, up to 70% of the card's width. If both columns are set to FILL_AVAILABLE_SPACE, each column fills 50% of the space.
FILL_MINIMUM_SPACE	Column fills the least amount of space possible and no more than 30% of the card's width.
HorizontalAlignment 
Specifies whether widgets align to the left, right, or center of a column.

 Available for Google Chat apps and unavailable for Google Workspace add-ons.

Enums
HORIZONTAL_ALIGNMENT_UNSPECIFIED	Don't use. Unspecified.
START	Default value. Aligns widgets to the start position of the column. For left-to-right layouts, aligns to the left. For right-to-left layouts, aligns to the right.
CENTER	Aligns widgets to the center of the column.
END	Aligns widgets to the end position of the column. For left-to-right layouts, aligns widgets to the right. For right-to-left layouts, aligns widgets to the left.
VerticalAlignment 
Specifies whether widgets align to the top, bottom, or center of a column.

Google Workspace add-ons and Chat apps

Enums
VERTICAL_ALIGNMENT_UNSPECIFIED	Don't use. Unspecified.
CENTER	Default value. Aligns widgets to the center of a column.
TOP	Aligns widgets to the top of a column.
BOTTOM	Aligns widgets to the bottom of a column.
Widgets 
The supported widgets that you can include in a column.

Google Workspace add-ons and Chat apps

JSON representation

{

  // Union field data can be only one of the following:
  "textParagraph": {
    object (TextParagraph)
  },
  "image": {
    object (Image)
  },
  "decoratedText": {
    object (DecoratedText)
  },
  "buttonList": {
    object (ButtonList)
  },
  "textInput": {
    object (TextInput)
  },
  "selectionInput": {
    object (SelectionInput)
  },
  "dateTimePicker": {
    object (DateTimePicker)
  },
  "chipList": {
    object (ChipList)
  }
  // End of list of possible types for union field data.
}
Fields
Union field data.

data can be only one of the following:

textParagraph	
object (TextParagraph)

TextParagraph widget.

image	
object (Image)

Image widget.

decoratedText	
object (DecoratedText)

DecoratedText widget.

buttonList	
object (ButtonList)

ButtonList widget.

textInput	
object (TextInput)

TextInput widget.

selectionInput	
object (SelectionInput)

SelectionInput widget.

dateTimePicker	
object (DateTimePicker)

DateTimePicker widget.

chipList	
object (ChipList)

ChipList widget.

ChipList 
A list of chips layed out horizontally, which can either scroll horizontally or wrap to the next line.

  Available for Google Chat apps and Google Workspace add-ons.

JSON representation

{
  "layout": enum (Layout),
  "chips": [
    {
      object (Chip)
    }
  ]
}
Fields
layout	
enum (Layout)

Specified chip list layout.

chips[]	
object (Chip)

An array of chips.

Layout 
The chip list layout.

Enums
LAYOUT_UNSPECIFIED	Don't use. Unspecified.
WRAPPED	Default value. The chip list wraps to the next line if there isn't enough horizontal space.
HORIZONTAL_SCROLLABLE	The chips scroll horizontally if they don't fit in the available space.
Chip 
A text, icon, or text and icon chip that users can click.

  Available for Google Chat apps and Google Workspace add-ons.

JSON representation

{
  "icon": {
    object (Icon)
  },
  "label": string,
  "onClick": {
    object (OnClick)
  },
  "enabled": boolean,
  "disabled": boolean,
  "altText": string
}
Fields
icon	
object (Icon)

The icon image. If both icon and text are set, then the icon appears before the text.

label	
string

The text displayed inside the chip.

onClick	
object (OnClick)

Optional. The action to perform when a user clicks the chip, such as opening a hyperlink or running a custom function.

enabled
(deprecated)	
boolean

This item is deprecated!

Whether the chip is in an active state and responds to user actions. Defaults to true. Deprecated. Use disabled instead.

disabled	
boolean

Whether the chip is in an inactive state and ignores user actions. Defaults to false.

altText	
string

The alternative text that's used for accessibility.

Set descriptive text that lets users know what the chip does. For example, if a chip opens a hyperlink, write: "Opens a new browser tab and navigates to the Google Chat developer documentation at https://developers.google.com/workspace/chat".

Carousel 

Developer Preview: Available as part of the Google Workspace Developer Preview Program, which grants early access to certain features.
A carousel, also known as a slider, rotates and displays a list of widgets in a slideshow format, with buttons navigating to the previous or next widget.

For example, this is a JSON representation of a carousel that contains three text paragraph widgets.


{
  "carouselCards": [
    {
      "widgets": [
        {
          "textParagraph": {
            "text": "First text paragraph in carousel",
          }
        }
      ]
    },
    {
      "widgets": [
        {
          "textParagraph": {
            "text": "Second text paragraph in carousel",
          }
        }
      ]
    },
    {
      "widgets": [
        {
          "textParagraph": {
            "text": "Third text paragraph in carousel",
          }
        }
      ]
    }
  ]
}
 Available for Google Chat apps and unavailable for Google Workspace add-ons.

JSON representation

{
  "carouselCards": [
    {
      object (CarouselCard)
    }
  ]
}
Fields
carouselCards[]	
object (CarouselCard)

A list of cards included in the carousel.

CarouselCard 

Developer Preview: Available as part of the Google Workspace Developer Preview Program, which grants early access to certain features.
A card that can be displayed as a carousel item.  Available for Google Chat apps and unavailable for Google Workspace add-ons.

JSON representation

{
  "widgets": [
    {
      object (NestedWidget)
    }
  ],
  "footerWidgets": [
    {
      object (NestedWidget)
    }
  ]
}
Fields
widgets[]	
object (NestedWidget)

A list of widgets displayed in the carousel card. The widgets are displayed in the order that they are specified.

footerWidgets[]	
object (NestedWidget)

A list of widgets displayed at the bottom of the carousel card. The widgets are displayed in the order that they are specified.

NestedWidget 

Developer Preview: Available as part of the Google Workspace Developer Preview Program, which grants early access to certain features.
A list of widgets that can be displayed in a containing layout, such as a CarouselCard.  Available for Google Chat apps and unavailable for Google Workspace add-ons.

JSON representation

{

  // Union field data can be only one of the following:
  "textParagraph": {
    object (TextParagraph)
  },
  "buttonList": {
    object (ButtonList)
  },
  "image": {
    object (Image)
  }
  // End of list of possible types for union field data.
}
Fields
Union field data.

data can be only one of the following:

textParagraph	
object (TextParagraph)

A text paragraph widget.

buttonList	
object (ButtonList)

A button list widget.

image	
object (Image)

An image widget.

CollapseControl 
Represent an expand and collapse control.

  Available for Google Chat apps and Google Workspace add-ons.

JSON representation

{
  "horizontalAlignment": enum (HorizontalAlignment),
  "expandButton": {
    object (Button)
  },
  "collapseButton": {
    object (Button)
  }
}
Fields
horizontalAlignment	
enum (HorizontalAlignment)

The horizontal alignment of the expand and collapse button.

expandButton	
object (Button)

Optional. Define a customizable button to expand the section. Both expandButton and collapseButton field must be set. Only one field set will not take into effect. If this field isn't set, the default button is used.

collapseButton	
object (Button)

Optional. Define a customizable button to collapse the section. Both expandButton and collapseButton field must be set. Only one field set will not take into effect. If this field isn't set, the default button is used.

DividerStyle 
The divider style of a card. Currently only used for dividers betweens card sections.

  Available for Google Chat apps and Google Workspace add-ons.

Enums
DIVIDER_STYLE_UNSPECIFIED	Don't use. Unspecified.
SOLID_DIVIDER	Default option. Render a solid divider.
NO_DIVIDER	If set, no divider is rendered. This style completely removes the divider from the layout. The result is equivalent to not adding a divider at all.
CardAction 
A card action is the action associated with the card. For example, an invoice card might include actions such as delete invoice, email invoice, or open the invoice in a browser.

 Available for Google Workspace add-ons and unavailable for Google Chat apps.

JSON representation

{
  "actionLabel": string,
  "onClick": {
    object (OnClick)
  }
}
Fields
actionLabel	
string

The label that displays as the action menu item.

onClick	
object (OnClick)

The onClick action for this action item.

CardFixedFooter 
A persistent (sticky) footer that that appears at the bottom of the card.

Setting fixedFooter without specifying a primaryButton or a secondaryButton causes an error.

For Chat apps, you can use fixed footers in dialogs, but not card messages. For an example in Google Chat apps, see Add a persistent footer.

  Available for Google Chat apps and Google Workspace add-ons.

JSON representation

{
  "primaryButton": {
    object (Button)
  },
  "secondaryButton": {
    object (Button)
  }
}
Fields
primaryButton	
object (Button)

The primary button of the fixed footer. The button must be a text button with text and color set.

secondaryButton	
object (Button)

The secondary button of the fixed footer. The button must be a text button with text and color set. If secondaryButton is set, you must also set primaryButton.

DisplayStyle 
In Google Workspace add-ons, determines how a card is displayed.

 Available for Google Workspace add-ons and unavailable for Google Chat apps.

Enums
DISPLAY_STYLE_UNSPECIFIED	Don't use. Unspecified.
PEEK	The header of the card appears at the bottom of the sidebar, partially covering the current top card of the stack. Clicking the header pops the card into the card stack. If the card has no header, a generated header is used instead.
REPLACE	Default value. The card is shown by replacing the view of the top card in the card stack.

Method: spaces.messages.create

bookmark_border

Creates a message in a Google Chat space. For an example, see Send a message.

Supports the following types of authentication:

App authentication with the authorization scope:
https://www.googleapis.com/auth/chat.bot
User authentication with one of the following authorization scopes:
https://www.googleapis.com/auth/chat.messages.create
https://www.googleapis.com/auth/chat.messages
https://www.googleapis.com/auth/chat.import (import mode spaces only)
Chat attributes the message sender differently depending on the type of authentication that you use in your request.

The following image shows how Chat attributes a message when you use app authentication. Chat displays the Chat app as the message sender. The content of the message can contain text (text), cards (cardsV2), and accessory widgets (accessoryWidgets).

Message sent with app authentication

The following image shows how Chat attributes a message when you use user authentication. Chat displays the user as the message sender and attributes the Chat app to the message by displaying its name. The content of message can only contain text (text).

Message sent with user authentication

The maximum message size, including the message contents, is 32,000 bytes.

For webhook requests, the response doesn't contain the full message. The response only populates the name and thread.name fields in addition to the information that was in the request.

HTTP request
POST https://chat.googleapis.com/v1/{parent=spaces/*}/messages

The URL uses gRPC Transcoding syntax.

Path parameters
Parameters
parent	
string

Required. The resource name of the space in which to create a message.

Format: spaces/{space}

Query parameters
Parameters
threadKey
(deprecated)	
string

Optional. Deprecated: Use thread.thread_key instead. ID for the thread. Supports up to 4000 characters. To start or add to a thread, create a message and specify a threadKey or the thread.name. For example usage, see Start or reply to a message thread.

requestId	
string

Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message.

messageReplyOption	
enum (MessageReplyOption)

Optional. Specifies whether a message starts a thread or replies to one. Only supported in named spaces.

When responding to user interactions, this field is ignored. For interactions within a thread, the reply is created in the same thread. Otherwise, the reply is created as a new thread.

messageId	
string

Optional. A custom ID for a message. Lets Chat apps get, update, or delete a message without needing to store the system-assigned ID in the message's resource name (represented in the message name field).

The value for this field must meet the following requirements:

Begins with client-. For example, client-custom-name is a valid custom ID, but custom-name is not.
Contains up to 63 characters and only lowercase letters, numbers, and hyphens.
Is unique within a space. A Chat app can't use the same custom ID for different messages.
For details, see Name a message.

Request body
The request body contains an instance of Message.

Response body
If successful, the response body contains a newly created instance of Message.

Authorization scopes
Requires one of the following OAuth scopes:

https://www.googleapis.com/auth/chat.bot
https://www.googleapis.com/auth/chat.import
https://www.googleapis.com/auth/chat.messages
https://www.googleapis.com/auth/chat.messages.create
For more information, see the Authorization guide.

MessageReplyOption
Specifies how to reply to a message. More states might be added in the future.

Enums
MESSAGE_REPLY_OPTION_UNSPECIFIED	Default. Starts a new thread. Using this option ignores any thread ID or threadKey that's included.
REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD	Creates the message as a reply to the thread specified by thread ID or threadKey. If it fails, the message starts a new thread instead.
REPLY_MESSAGE_OR_FAIL	Creates the message as a reply to the thread specified by thread ID or threadKey. If a new threadKey is used, a new thread is created. If the message creation fails, a NOT_FOUND error is returned instead.

Method: spaces.messages.delete

bookmark_border

Deletes a message. For an example, see Delete a message.

Supports the following types of authentication:

App authentication with the authorization scope:

https://www.googleapis.com/auth/chat.bot
User authentication with one of the following authorization scopes:

https://www.googleapis.com/auth/chat.messages
https://www.googleapis.com/auth/chat.import (import mode spaces only)
When using app authentication, requests can only delete messages created by the calling Chat app.

HTTP request
DELETE https://chat.googleapis.com/v1/{name=spaces/*/messages/*}

The URL uses gRPC Transcoding syntax.

Path parameters
Parameters
name	
string

Required. Resource name of the message.

Format: spaces/{space}/messages/{message}

If you've set a custom ID for your message, you can use the value from the clientAssignedMessageId field for {message}. For details, see Name a message.

Query parameters
Parameters
force	
boolean

Optional. When true, deleting a message also deletes its threaded replies. When false, if a message has threaded replies, deletion fails.

Only applies when authenticating as a user. Has no effect when authenticating as a Chat app.

Request body
The request body must be empty.

Response body
If successful, the response body is an empty JSON object.

Authorization scopes
Requires one of the following OAuth scopes:

https://www.googleapis.com/auth/chat.bot
https://www.googleapis.com/auth/chat.import
https://www.googleapis.com/auth/chat.messages
For more information, see the Authorization guide.
Method: spaces.messages.get

bookmark_border

Returns details about a message. For an example, see Get details about a message.

Supports the following types of authentication:

App authentication with the authorization scope:

https://www.googleapis.com/auth/chat.bot
User authentication with one of the following authorization scopes:

https://www.googleapis.com/auth/chat.messages.readonly
https://www.googleapis.com/auth/chat.messages
Note: Might return a message from a blocked member or space.

HTTP request
GET https://chat.googleapis.com/v1/{name=spaces/*/messages/*}

The URL uses gRPC Transcoding syntax.

Path parameters
Parameters
name	
string

Required. Resource name of the message.

Format: spaces/{space}/messages/{message}

If you've set a custom ID for your message, you can use the value from the clientAssignedMessageId field for {message}. For details, see Name a message.

Request body
The request body must be empty.

Response body
If successful, the response body contains an instance of Message.

Authorization scopes
Requires one of the following OAuth scopes:

https://www.googleapis.com/auth/chat.bot
https://www.googleapis.com/auth/chat.messages
https://www.googleapis.com/auth/chat.messages.readonly
For more information, see the Authorization guide.
Method: spaces.messages.list

bookmark_border

Lists messages in a space that the caller is a member of, including messages from blocked members and spaces. If you list messages from a space with no messages, the response is an empty object. When using a REST/HTTP interface, the response contains an empty JSON object, {}. For an example, see List messages.

Requires user authentication with one of the following authorization scopes:

https://www.googleapis.com/auth/chat.messages.readonly
https://www.googleapis.com/auth/chat.messages
https://www.googleapis.com/auth/chat.import (import mode spaces only)
HTTP request
GET https://chat.googleapis.com/v1/{parent=spaces/*}/messages

The URL uses gRPC Transcoding syntax.

Path parameters
Parameters
parent	
string

Required. The resource name of the space to list messages from.

Format: spaces/{space}

Query parameters
Parameters
pageSize	
integer

Optional. The maximum number of messages returned. The service might return fewer messages than this value.

If unspecified, at most 25 are returned.

The maximum value is 1000. If you use a value more than 1000, it's automatically changed to 1000.

Negative values return an INVALID_ARGUMENT error.

pageToken	
string

Optional. A page token received from a previous list messages call. Provide this parameter to retrieve the subsequent page.

When paginating, all other parameters provided should match the call that provided the page token. Passing different values to the other parameters might lead to unexpected results.

filter	
string

Optional. A query filter.

You can filter messages by date (createTime) and thread (thread.name).

To filter messages by the date they were created, specify the createTime with a timestamp in RFC-3339 format and double quotation marks. For example, "2023-04-21T11:30:00-04:00". You can use the greater than operator > to list messages that were created after a timestamp, or the less than operator < to list messages that were created before a timestamp. To filter messages within a time interval, use the AND operator between two timestamps.

To filter by thread, specify the thread.name, formatted as spaces/{space}/threads/{thread}. You can only specify one thread.name per query.

To filter by both thread and date, use the AND operator in your query.

For example, the following queries are valid:


createTime > "2012-04-21T11:30:00-04:00"

createTime > "2012-04-21T11:30:00-04:00" AND
  thread.name = spaces/AAAAAAAAAAA/threads/123

createTime > "2012-04-21T11:30:00+00:00" AND

createTime < "2013-01-01T00:00:00+00:00" AND
  thread.name = spaces/AAAAAAAAAAA/threads/123

thread.name = spaces/AAAAAAAAAAA/threads/123
Invalid queries are rejected by the server with an INVALID_ARGUMENT error.

orderBy	
string

Optional. How the list of messages is ordered. Specify a value to order by an ordering operation. Valid ordering operation values are as follows:

ASC for ascending.

DESC for descending.

The default ordering is createTime ASC.

showDeleted	
boolean

Optional. Whether to include deleted messages. Deleted messages include deleted time and metadata about their deletion, but message content is unavailable.

Request body
The request body must be empty.

Response body
Response message for listing messages.

If successful, the response body contains data with the following structure:

JSON representation

{
  "messages": [
    {
      object (Message)
    }
  ],
  "nextPageToken": string
}
Fields
messages[]	
object (Message)

List of messages.

nextPageToken	
string

You can send a token as pageToken to retrieve the next page of results. If empty, there are no subsequent pages.

Authorization scopes
Requires one of the following OAuth scopes:

https://www.googleapis.com/auth/chat.import
https://www.googleapis.com/auth/chat.messages
https://www.googleapis.com/auth/chat.messages.readonly
For more information, see the Authorization guide.

Method: spaces.messages.patch

bookmark_border

Updates a message. There's a difference between the patch and update methods. The patch method uses a patch request while the update method uses a put request. We recommend using the patch method. For an example, see Update a message.

Supports the following types of authentication:

App authentication with the authorization scope:

https://www.googleapis.com/auth/chat.bot
User authentication with one of the following authorization scopes:

https://www.googleapis.com/auth/chat.messages
https://www.googleapis.com/auth/chat.import (import mode spaces only)
When using app authentication, requests can only update messages created by the calling Chat app.

HTTP request
PATCH https://chat.googleapis.com/v1/{message.name=spaces/*/messages/*}

The URL uses gRPC Transcoding syntax.

Path parameters
Parameters
message.name	
string

Identifier. Resource name of the message.

Format: spaces/{space}/messages/{message}

Where {space} is the ID of the space where the message is posted and {message} is a system-assigned ID for the message. For example, spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB.

If you set a custom ID when you create a message, you can use this ID to specify the message in a request by replacing {message} with the value from the clientAssignedMessageId field. For example, spaces/AAAAAAAAAAA/messages/client-custom-name. For details, see Name a message.

Query parameters
Parameters
updateMask	
string (FieldMask format)

Required. The field paths to update. Separate multiple values with commas or use * to update all field paths.

Currently supported field paths:

text

attachment

cards (Requires app authentication.)

cardsV2 (Requires app authentication.)

accessoryWidgets (Requires app authentication.)

allowMissing	
boolean

Optional. If true and the message isn't found, a new message is created and updateMask is ignored. The specified message ID must be client-assigned or the request fails.

Request body
The request body contains an instance of Message.

Response body
If successful, the response body contains an instance of Message.

Authorization scopes
Requires one of the following OAuth scopes:

https://www.googleapis.com/auth/chat.bot
https://www.googleapis.com/auth/chat.import
https://www.googleapis.com/auth/chat.messages
For more information, see the Authorization guide.
Method: spaces.messages.update

bookmark_border

Release Notes
Updates a message. There's a difference between the patch and update methods. The patch method uses a patch request while the update method uses a put request. We recommend using the patch method. For an example, see Update a message.

Supports the following types of authentication:

App authentication with the authorization scope:

https://www.googleapis.com/auth/chat.bot
User authentication with one of the following authorization scopes:

https://www.googleapis.com/auth/chat.messages
https://www.googleapis.com/auth/chat.import (import mode spaces only)
When using app authentication, requests can only update messages created by the calling Chat app.

HTTP request
PUT https://chat.googleapis.com/v1/{message.name=spaces/*/messages/*}

The URL uses gRPC Transcoding syntax.

Path parameters
Parameters
message.name	
string

Identifier. Resource name of the message.

Format: spaces/{space}/messages/{message}

Where {space} is the ID of the space where the message is posted and {message} is a system-assigned ID for the message. For example, spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB.

If you set a custom ID when you create a message, you can use this ID to specify the message in a request by replacing {message} with the value from the clientAssignedMessageId field. For example, spaces/AAAAAAAAAAA/messages/client-custom-name. For details, see Name a message.

Query parameters
Parameters
updateMask	
string (FieldMask format)

Required. The field paths to update. Separate multiple values with commas or use * to update all field paths.

Currently supported field paths:

text

attachment

cards (Requires app authentication.)

cardsV2 (Requires app authentication.)

accessoryWidgets (Requires app authentication.)

quotedMessageMetadata (Only allows removal of the quoted message.)

allowMissing	
boolean

Optional. If true and the message isn't found, a new message is created and updateMask is ignored. The specified message ID must be client-assigned or the request fails.

Request body
The request body contains an instance of Message.

Response body
If successful, the response body contains an instance of Message.

Authorization scopes
Requires one of the following OAuth scopes:

https://www.googleapis.com/auth/chat.bot
https://www.googleapis.com/auth/chat.import
https://www.googleapis.com/auth/chat.messages
For more information, see the Authorization guide.
REST Resource: spaces.spaceEvents

bookmark_border

Release Notes
Resource: SpaceEvent
An event that represents a change or activity in a Google Chat space. To learn more, see Work with events from Google Chat.

JSON representation

{
  "name": string,
  "eventTime": string,
  "eventType": string,

  // Union field payload can be only one of the following:
  "messageCreatedEventData": {
    object (MessageCreatedEventData)
  },
  "messageUpdatedEventData": {
    object (MessageUpdatedEventData)
  },
  "messageDeletedEventData": {
    object (MessageDeletedEventData)
  },
  "messageBatchCreatedEventData": {
    object (MessageBatchCreatedEventData)
  },
  "messageBatchUpdatedEventData": {
    object (MessageBatchUpdatedEventData)
  },
  "messageBatchDeletedEventData": {
    object (MessageBatchDeletedEventData)
  },
  "spaceUpdatedEventData": {
    object (SpaceUpdatedEventData)
  },
  "spaceBatchUpdatedEventData": {
    object (SpaceBatchUpdatedEventData)
  },
  "membershipCreatedEventData": {
    object (MembershipCreatedEventData)
  },
  "membershipUpdatedEventData": {
    object (MembershipUpdatedEventData)
  },
  "membershipDeletedEventData": {
    object (MembershipDeletedEventData)
  },
  "membershipBatchCreatedEventData": {
    object (MembershipBatchCreatedEventData)
  },
  "membershipBatchUpdatedEventData": {
    object (MembershipBatchUpdatedEventData)
  },
  "membershipBatchDeletedEventData": {
    object (MembershipBatchDeletedEventData)
  },
  "reactionCreatedEventData": {
    object (ReactionCreatedEventData)
  },
  "reactionDeletedEventData": {
    object (ReactionDeletedEventData)
  },
  "reactionBatchCreatedEventData": {
    object (ReactionBatchCreatedEventData)
  },
  "reactionBatchDeletedEventData": {
    object (ReactionBatchDeletedEventData)
  }
  // End of list of possible types for union field payload.
}
Fields
name	
string

Resource name of the space event.

Format: spaces/{space}/spaceEvents/{spaceEvent}

eventTime	
string (Timestamp format)

Time when the event occurred.

eventType	
string

Type of space event. Each event type has a batch version, which represents multiple instances of the event type that occur in a short period of time. For spaceEvents.list() requests, omit batch event types in your query filter. By default, the server returns both event type and its batch version.

Supported event types for messages:

New message: google.workspace.chat.message.v1.created
Updated message: google.workspace.chat.message.v1.updated
Deleted message: google.workspace.chat.message.v1.deleted
Multiple new messages: google.workspace.chat.message.v1.batchCreated
Multiple updated messages: google.workspace.chat.message.v1.batchUpdated
Multiple deleted messages: google.workspace.chat.message.v1.batchDeleted
Supported event types for memberships:

New membership: google.workspace.chat.membership.v1.created
Updated membership: google.workspace.chat.membership.v1.updated
Deleted membership: google.workspace.chat.membership.v1.deleted
Multiple new memberships: google.workspace.chat.membership.v1.batchCreated
Multiple updated memberships: google.workspace.chat.membership.v1.batchUpdated
Multiple deleted memberships: google.workspace.chat.membership.v1.batchDeleted
Supported event types for reactions:

New reaction: google.workspace.chat.reaction.v1.created
Deleted reaction: google.workspace.chat.reaction.v1.deleted
Multiple new reactions: google.workspace.chat.reaction.v1.batchCreated
Multiple deleted reactions: google.workspace.chat.reaction.v1.batchDeleted
Supported event types about the space:

Updated space: google.workspace.chat.space.v1.updated
Multiple space updates: google.workspace.chat.space.v1.batchUpdated
Union field payload.

payload can be only one of the following:

messageCreatedEventData	
object (MessageCreatedEventData)

Event payload for a new message.

Event type: google.workspace.chat.message.v1.created

messageUpdatedEventData	
object (MessageUpdatedEventData)

Event payload for an updated message.

Event type: google.workspace.chat.message.v1.updated

messageDeletedEventData	
object (MessageDeletedEventData)

Event payload for a deleted message.

Event type: google.workspace.chat.message.v1.deleted

messageBatchCreatedEventData	
object (MessageBatchCreatedEventData)

Event payload for multiple new messages.

Event type: google.workspace.chat.message.v1.batchCreated

messageBatchUpdatedEventData	
object (MessageBatchUpdatedEventData)

Event payload for multiple updated messages.

Event type: google.workspace.chat.message.v1.batchUpdated

messageBatchDeletedEventData	
object (MessageBatchDeletedEventData)

Event payload for multiple deleted messages.

Event type: google.workspace.chat.message.v1.batchDeleted

spaceUpdatedEventData	
object (SpaceUpdatedEventData)

Event payload for a space update.

Event type: google.workspace.chat.space.v1.updated

spaceBatchUpdatedEventData	
object (SpaceBatchUpdatedEventData)

Event payload for multiple updates to a space.

Event type: google.workspace.chat.space.v1.batchUpdated

membershipCreatedEventData	
object (MembershipCreatedEventData)

Event payload for a new membership.

Event type: google.workspace.chat.membership.v1.created

membershipUpdatedEventData	
object (MembershipUpdatedEventData)

Event payload for an updated membership.

Event type: google.workspace.chat.membership.v1.updated

membershipDeletedEventData	
object (MembershipDeletedEventData)

Event payload for a deleted membership.

Event type: google.workspace.chat.membership.v1.deleted

membershipBatchCreatedEventData	
object (MembershipBatchCreatedEventData)

Event payload for multiple new memberships.

Event type: google.workspace.chat.membership.v1.batchCreated

membershipBatchUpdatedEventData	
object (MembershipBatchUpdatedEventData)

Event payload for multiple updated memberships.

Event type: google.workspace.chat.membership.v1.batchUpdated

membershipBatchDeletedEventData	
object (MembershipBatchDeletedEventData)

Event payload for multiple deleted memberships.

Event type: google.workspace.chat.membership.v1.batchDeleted

reactionCreatedEventData	
object (ReactionCreatedEventData)

Event payload for a new reaction.

Event type: google.workspace.chat.reaction.v1.created

reactionDeletedEventData	
object (ReactionDeletedEventData)

Event payload for a deleted reaction.

Event type: google.workspace.chat.reaction.v1.deleted

reactionBatchCreatedEventData	
object (ReactionBatchCreatedEventData)

Event payload for multiple new reactions.

Event type: google.workspace.chat.reaction.v1.batchCreated

reactionBatchDeletedEventData	
object (ReactionBatchDeletedEventData)

Event payload for multiple deleted reactions.

Event type: google.workspace.chat.reaction.v1.batchDeleted

MessageCreatedEventData
Event payload for a new message.

Event type: google.workspace.chat.message.v1.created

JSON representation

{
  "message": {
    object (Message)
  }
}
Fields
message	
object (Message)

The new message.

MessageUpdatedEventData
Event payload for an updated message.

Event type: google.workspace.chat.message.v1.updated

JSON representation

{
  "message": {
    object (Message)
  }
}
Fields
message	
object (Message)

The updated message.

MessageDeletedEventData
Event payload for a deleted message.

Event type: google.workspace.chat.message.v1.deleted

JSON representation

{
  "message": {
    object (Message)
  }
}
Fields
message	
object (Message)

The deleted message. Only the name, createTime, deleteTime, and deletionMetadata fields are populated.

MessageBatchCreatedEventData
Event payload for multiple new messages.

Event type: google.workspace.chat.message.v1.batchCreated

JSON representation

{
  "messages": [
    {
      object (MessageCreatedEventData)
    }
  ]
}
Fields
messages[]	
object (MessageCreatedEventData)

A list of new messages.

MessageBatchUpdatedEventData
Event payload for multiple updated messages.

Event type: google.workspace.chat.message.v1.batchUpdated

JSON representation

{
  "messages": [
    {
      object (MessageUpdatedEventData)
    }
  ]
}
Fields
messages[]	
object (MessageUpdatedEventData)

A list of updated messages.

MessageBatchDeletedEventData
Event payload for multiple deleted messages.

Event type: google.workspace.chat.message.v1.batchDeleted

JSON representation

{
  "messages": [
    {
      object (MessageDeletedEventData)
    }
  ]
}
Fields
messages[]	
object (MessageDeletedEventData)

A list of deleted messages.

SpaceUpdatedEventData
Event payload for an updated space.

Event type: google.workspace.chat.space.v1.updated

JSON representation

{
  "space": {
    object (Space)
  }
}
Fields
space	
object (Space)

The updated space.

SpaceBatchUpdatedEventData
Event payload for multiple updates to a space.

Event type: google.workspace.chat.space.v1.batchUpdated

JSON representation

{
  "spaces": [
    {
      object (SpaceUpdatedEventData)
    }
  ]
}
Fields
spaces[]	
object (SpaceUpdatedEventData)

A list of updated spaces.

MembershipCreatedEventData
Event payload for a new membership.

Event type: google.workspace.chat.membership.v1.created.

JSON representation

{
  "membership": {
    object (Membership)
  }
}
Fields
membership	
object (Membership)

The new membership.

MembershipUpdatedEventData
Event payload for an updated membership.

Event type: google.workspace.chat.membership.v1.updated

JSON representation

{
  "membership": {
    object (Membership)
  }
}
Fields
membership	
object (Membership)

The updated membership.

MembershipDeletedEventData
Event payload for a deleted membership.

Event type: google.workspace.chat.membership.v1.deleted

JSON representation

{
  "membership": {
    object (Membership)
  }
}
Fields
membership	
object (Membership)

The deleted membership. Only the name and state fields are populated.

MembershipBatchCreatedEventData
Event payload for multiple new memberships.

Event type: google.workspace.chat.membership.v1.batchCreated

JSON representation

{
  "memberships": [
    {
      object (MembershipCreatedEventData)
    }
  ]
}
Fields
memberships[]	
object (MembershipCreatedEventData)

A list of new memberships.

MembershipBatchUpdatedEventData
Event payload for multiple updated memberships.

Event type: google.workspace.chat.membership.v1.batchUpdated

JSON representation

{
  "memberships": [
    {
      object (MembershipUpdatedEventData)
    }
  ]
}
Fields
memberships[]	
object (MembershipUpdatedEventData)

A list of updated memberships.

MembershipBatchDeletedEventData
Event payload for multiple deleted memberships.

Event type: google.workspace.chat.membership.v1.batchDeleted

JSON representation

{
  "memberships": [
    {
      object (MembershipDeletedEventData)
    }
  ]
}
Fields
memberships[]	
object (MembershipDeletedEventData)

A list of deleted memberships.

ReactionCreatedEventData
Event payload for a new reaction.

Event type: google.workspace.chat.reaction.v1.created

JSON representation

{
  "reaction": {
    object (Reaction)
  }
}
Fields
reaction	
object (Reaction)

The new reaction.

ReactionDeletedEventData
Event payload for a deleted reaction.

Type: google.workspace.chat.reaction.v1.deleted

JSON representation

{
  "reaction": {
    object (Reaction)
  }
}
Fields
reaction	
object (Reaction)

The deleted reaction.

ReactionBatchCreatedEventData
Event payload for multiple new reactions.

Event type: google.workspace.chat.reaction.v1.batchCreated

JSON representation

{
  "reactions": [
    {
      object (ReactionCreatedEventData)
    }
  ]
}
Fields
reactions[]	
object (ReactionCreatedEventData)

A list of new reactions.

ReactionBatchDeletedEventData
Event payload for multiple deleted reactions.

Event type: google.workspace.chat.reaction.v1.batchDeleted

JSON representation

{
  "reactions": [
    {
      object (ReactionDeletedEventData)
    }
  ]
}
Fields
reactions[]	
object (ReactionDeletedEventData)

A list of deleted reactions.

Methods
get
Returns an event from a Google Chat space.
list
Lists events from a Google Chat space.
Method: spaces.spaceEvents.get

bookmark_border

Release Notes
Returns an event from a Google Chat space. The event payload contains the most recent version of the resource that changed. For example, if you request an event about a new message but the message was later updated, the server returns the updated Message resource in the event payload.

Note: The permissionSettings field is not returned in the Space object of the Space event data for this request.

Requires user authentication with an authorization scope appropriate for reading the requested data:

https://www.googleapis.com/auth/chat.spaces.readonly
https://www.googleapis.com/auth/chat.spaces
https://www.googleapis.com/auth/chat.messages.readonly
https://www.googleapis.com/auth/chat.messages
https://www.googleapis.com/auth/chat.messages.reactions.readonly
https://www.googleapis.com/auth/chat.messages.reactions
https://www.googleapis.com/auth/chat.memberships.readonly
https://www.googleapis.com/auth/chat.memberships
To get an event, the authenticated user must be a member of the space.

For an example, see Get details about an event from a Google Chat space.

HTTP request
GET https://chat.googleapis.com/v1/{name=spaces/*/spaceEvents/*}

The URL uses gRPC Transcoding syntax.

Path parameters
Parameters
name	
string

Required. The resource name of the space event.

Format: spaces/{space}/spaceEvents/{spaceEvent}

Request body
The request body must be empty.

Response body
If successful, the response body contains an instance of SpaceEvent.

Authorization scopes
Requires one of the following OAuth scopes:

https://www.googleapis.com/auth/chat.spaces
https://www.googleapis.com/auth/chat.spaces.readonly
https://www.googleapis.com/auth/chat.messages
https://www.googleapis.com/auth/chat.messages.readonly
https://www.googleapis.com/auth/chat.memberships
https://www.googleapis.com/auth/chat.memberships.readonly
https://www.googleapis.com/auth/chat.messages.reactions
https://www.googleapis.com/auth/chat.messages.reactions.readonly
For more information, see the Authorization guide.
Method: spaces.spaceEvents.list

bookmark_border

Release Notes
Lists events from a Google Chat space. For each event, the payload contains the most recent version of the Chat resource. For example, if you list events about new space members, the server returns Membership resources that contain the latest membership details. If new members were removed during the requested period, the event payload contains an empty Membership resource.

Requires user authentication with an authorization scope appropriate for reading the requested data:

https://www.googleapis.com/auth/chat.spaces.readonly
https://www.googleapis.com/auth/chat.spaces
https://www.googleapis.com/auth/chat.messages.readonly
https://www.googleapis.com/auth/chat.messages
https://www.googleapis.com/auth/chat.messages.reactions.readonly
https://www.googleapis.com/auth/chat.messages.reactions
https://www.googleapis.com/auth/chat.memberships.readonly
https://www.googleapis.com/auth/chat.memberships
To list events, the authenticated user must be a member of the space.

For an example, see List events from a Google Chat space.

HTTP request
GET https://chat.googleapis.com/v1/{parent=spaces/*}/spaceEvents

The URL uses gRPC Transcoding syntax.

Path parameters
Parameters
parent	
string

Required. Resource name of the Google Chat space where the events occurred.

Format: spaces/{space}.

Query parameters
Parameters
pageSize	
integer

Optional. The maximum number of space events returned. The service might return fewer than this value.

Negative values return an INVALID_ARGUMENT error.

pageToken	
string

Optional. A page token, received from a previous list space events call. Provide this to retrieve the subsequent page.

When paginating, all other parameters provided to list space events must match the call that provided the page token. Passing different values to the other parameters might lead to unexpected results.

filter	
string

Required. A query filter.

You must specify at least one event type (eventType) using the has : operator. To filter by multiple event types, use the OR operator. Omit batch event types in your filter. The request automatically returns any related batch events. For example, if you filter by new reactions (google.workspace.chat.reaction.v1.created), the server also returns batch new reactions events (google.workspace.chat.reaction.v1.batchCreated). For a list of supported event types, see the SpaceEvents reference documentation.

Optionally, you can also filter by start time (startTime) and end time (endTime):

startTime: Exclusive timestamp from which to start listing space events. You can list events that occurred up to 28 days ago. If unspecified, lists space events from the past 28 days.
endTime: Inclusive timestamp until which space events are listed. If unspecified, lists events up to the time of the request.
To specify a start or end time, use the equals = operator and format in RFC-3339. To filter by both startTime and endTime, use the AND operator.

For example, the following queries are valid:


startTime="2023-08-23T19:20:33+00:00" AND
endTime="2023-08-23T19:21:54+00:00"

startTime="2023-08-23T19:20:33+00:00" AND
(eventTypes:"google.workspace.chat.space.v1.updated" OR
eventTypes:"google.workspace.chat.message.v1.created")
The following queries are invalid:


startTime="2023-08-23T19:20:33+00:00" OR
endTime="2023-08-23T19:21:54+00:00"

eventTypes:"google.workspace.chat.space.v1.updated" AND
eventTypes:"google.workspace.chat.message.v1.created"
Invalid queries are rejected by the server with an INVALID_ARGUMENT error.

Request body
The request body must be empty.

Response body
Response message for listing space events.

If successful, the response body contains data with the following structure:

JSON representation

{
  "spaceEvents": [
    {
      object (SpaceEvent)
    }
  ],
  "nextPageToken": string
}
Fields
spaceEvents[]	
object (SpaceEvent)

Results are returned in chronological order (oldest event first). Note: The permissionSettings field is not returned in the Space object for list requests.

nextPageToken	
string

Continuation token used to fetch more events. If this field is omitted, there are no subsequent pages.

Authorization scopes
Requires one of the following OAuth scopes:

https://www.googleapis.com/auth/chat.spaces
https://www.googleapis.com/auth/chat.spaces.readonly
https://www.googleapis.com/auth/chat.messages
https://www.googleapis.com/auth/chat.messages.readonly
https://www.googleapis.com/auth/chat.memberships
https://www.googleapis.com/auth/chat.memberships.readonly
https://www.googleapis.com/auth/chat.messages.reactions
https://www.googleapis.com/auth/chat.messages.reactions.readonly
For more information, see the Authorization guide.
REST Resource: users.spaces

bookmark_border

Release Notes
Resource: SpaceReadState
A user's read state within a space, used to identify read and unread messages.

JSON representation

{
  "name": string,
  "lastReadTime": string
}
Fields
name	
string

Resource name of the space read state.

Format: users/{user}/spaces/{space}/spaceReadState

lastReadTime	
string (Timestamp format)

Optional. The time when the user's space read state was updated. Usually this corresponds with either the timestamp of the last read message, or a timestamp specified by the user to mark the last read position in a space.

Methods
getSpaceReadState
Returns details about a user's read state within a space, used to identify read and unread messages.
updateSpaceReadState
Updates a user's read state within a space, used to identify read and unread messages.

Method: users.spaces.getSpaceReadState

bookmark_border

Returns details about a user's read state within a space, used to identify read and unread messages. For an example, see Get details about a user's space read state.

Requires user authentication with one of the following authorization scopes:

https://www.googleapis.com/auth/chat.users.readstate.readonly
https://www.googleapis.com/auth/chat.users.readstate
HTTP request
GET https://chat.googleapis.com/v1/{name=users/*/spaces/*/spaceReadState}

The URL uses gRPC Transcoding syntax.

Path parameters
Parameters
name	
string

Required. Resource name of the space read state to retrieve.

Only supports getting read state for the calling user.

To refer to the calling user, set one of the following:

The me alias. For example, users/me/spaces/{space}/spaceReadState.

Their Workspace email address. For example, users/user@example.com/spaces/{space}/spaceReadState.

Their user id. For example, users/123456789/spaces/{space}/spaceReadState.

Format: users/{user}/spaces/{space}/spaceReadState

Request body
The request body must be empty.

Response body
If successful, the response body contains an instance of SpaceReadState.

Authorization scopes
Requires one of the following OAuth scopes:

https://www.googleapis.com/auth/chat.users.readstate
https://www.googleapis.com/auth/chat.users.readstate.readonly
For more information, see the Authorization guide.
Method: users.spaces.updateSpaceReadState

bookmark_border

Updates a user's read state within a space, used to identify read and unread messages. For an example, see Update a user's space read state.

Requires user authentication with the authorization scope:

https://www.googleapis.com/auth/chat.users.readstate
HTTP request
PATCH https://chat.googleapis.com/v1/{spaceReadState.name=users/*/spaces/*/spaceReadState}

The URL uses gRPC Transcoding syntax.

Path parameters
Parameters
spaceReadState.name	
string

Resource name of the space read state.

Format: users/{user}/spaces/{space}/spaceReadState

Query parameters
Parameters
updateMask	
string (FieldMask format)

Required. The field paths to update. Currently supported field paths:

lastReadTime
When the lastReadTime is before the latest message create time, the space appears as unread in the UI.

To mark the space as read, set lastReadTime to any value later (larger) than the latest message create time. The lastReadTime is coerced to match the latest message create time. Note that the space read state only affects the read state of messages that are visible in the space's top-level conversation. Replies in threads are unaffected by this timestamp, and instead rely on the thread read state.

Request body
The request body contains an instance of SpaceReadState.

Response body
If successful, the response body contains an instance of SpaceReadState.

Authorization scopes
Requires the following OAuth scope:

https://www.googleapis.com/auth/chat.users.readstate
For more information, see the Authorization guide.
REST Resource: users.spaces.spaceNotificationSetting

bookmark_border

Release Notes
Resource: SpaceNotificationSetting
The notification setting of a user in a space.

JSON representation

{
  "name": string,
  "notificationSetting": enum (NotificationSetting),
  "muteSetting": enum (MuteSetting)
}
Fields
name	
string

Identifier. The resource name of the space notification setting. Format: users/{user}/spaces/{space}/spaceNotificationSetting.

notificationSetting	
enum (NotificationSetting)

The notification setting.

muteSetting	
enum (MuteSetting)

The space notification mute setting.

NotificationSetting
The notification setting types. Other types might be supported in the future.

Enums
NOTIFICATION_SETTING_UNSPECIFIED	Reserved.
ALL	Notifications are triggered by @mentions, followed threads, first message of new threads. All new threads are automatically followed, unless manually unfollowed by the user.
MAIN_CONVERSATIONS	The notification is triggered by @mentions, followed threads, first message of new threads. Not available for 1:1 direct messages.
FOR_YOU	The notification is triggered by @mentions, followed threads. Not available for 1:1 direct messages.
OFF	Notification is off.
MuteSetting
The space notification mute setting types.

Enums
MUTE_SETTING_UNSPECIFIED	Reserved.
UNMUTED	The user will receive notifications for the space based on the notification setting.
MUTED	The user will not receive any notifications for the space, regardless of the notification setting.
Methods
get
Gets the space notification setting.
patch
Updates the space notification setting.
Method: users.spaces.spaceNotificationSetting.get

bookmark_border

Gets the space notification setting. For an example, see Get the caller's space notification setting.

Requires user authentication with the authorization scope:

https://www.googleapis.com/auth/chat.users.spacesettings
HTTP request
GET https://chat.googleapis.com/v1/{name=users/*/spaces/*/spaceNotificationSetting}

The URL uses gRPC Transcoding syntax.

Path parameters
Parameters
name	
string

Required. Format: users/{user}/spaces/{space}/spaceNotificationSetting

users/me/spaces/{space}/spaceNotificationSetting, OR
users/user@example.com/spaces/{space}/spaceNotificationSetting, OR
users/123456789/spaces/{space}/spaceNotificationSetting. Note: Only the caller's user id or email is allowed in the path.
Request body
The request body must be empty.

Response body
If successful, the response body contains an instance of SpaceNotificationSetting.

Authorization scopes
Requires the following OAuth scope:

https://www.googleapis.com/auth/chat.users.spacesettings
For more information, see the Authorization guide.
Method: users.spaces.spaceNotificationSetting.patch

bookmark_border

Updates the space notification setting. For an example, see Update the caller's space notification setting.

Requires user authentication with the authorization scope:

https://www.googleapis.com/auth/chat.users.spacesettings
HTTP request
PATCH https://chat.googleapis.com/v1/{spaceNotificationSetting.name=users/*/spaces/*/spaceNotificationSetting}

The URL uses gRPC Transcoding syntax.

Path parameters
Parameters
spaceNotificationSetting.name	
string

Identifier. The resource name of the space notification setting. Format: users/{user}/spaces/{space}/spaceNotificationSetting.

Query parameters
Parameters
updateMask	
string (FieldMask format)

Required. Supported field paths:

notificationSetting

muteSetting

Request body
The request body contains an instance of SpaceNotificationSetting.

Response body
If successful, the response body contains an instance of SpaceNotificationSetting.

Authorization scopes
Requires the following OAuth scope:

https://www.googleapis.com/auth/chat.users.spacesettings
For more information, see the Authorization guide.
REST Resource: users.spaces.threads

bookmark_border

Release Notes
Resource: ThreadReadState
A user's read state within a thread, used to identify read and unread messages.

JSON representation

{
  "name": string,
  "lastReadTime": string
}
Fields
name	
string

Resource name of the thread read state.

Format: users/{user}/spaces/{space}/threads/{thread}/threadReadState

lastReadTime	
string (Timestamp format)

The time when the user's thread read state was updated. Usually this corresponds with the timestamp of the last read message in a thread.

Methods
getThreadReadState
Returns details about a user's read state within a thread, used to identify read and unread messages.

Method: users.spaces.threads.getThreadReadState

bookmark_border

Returns details about a user's read state within a thread, used to identify read and unread messages. For an example, see Get details about a user's thread read state.

Requires user authentication with one of the following authorization scopes:

https://www.googleapis.com/auth/chat.users.readstate.readonly
https://www.googleapis.com/auth/chat.users.readstate
HTTP request
GET https://chat.googleapis.com/v1/{name=users/*/spaces/*/threads/*/threadReadState}

The URL uses gRPC Transcoding syntax.

Path parameters
Parameters
name	
string

Required. Resource name of the thread read state to retrieve.

Only supports getting read state for the calling user.

To refer to the calling user, set one of the following:

The me alias. For example, users/me/spaces/{space}/threads/{thread}/threadReadState.

Their Workspace email address. For example, users/user@example.com/spaces/{space}/threads/{thread}/threadReadState.

Their user id. For example, users/123456789/spaces/{space}/threads/{thread}/threadReadState.

Format: users/{user}/spaces/{space}/threads/{thread}/threadReadState

Request body
The request body must be empty.

Response body
If successful, the response body contains an instance of ThreadReadState.

Authorization scopes
Requires one of the following OAuth scopes:

https://www.googleapis.com/auth/chat.users.readstate
https://www.googleapis.com/auth/chat.users.readstate.readonly
For more information, see the Authorization guide.

